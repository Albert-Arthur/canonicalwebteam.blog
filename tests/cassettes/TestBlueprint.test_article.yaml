interactions:
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      User-Agent: [python-requests/2.22.0]
    method: GET
    uri: https://admin.insights.ubuntu.com/wp-json/wp/v2/posts?slug=testing-your-user-contract&_embed=true
  response:
    body: {string: '[{"id":93920,"date":"2020-02-10T22:48:14","date_gmt":"2020-02-10T22:48:14","guid":{"rendered":"https:\/\/admin.insights.ubuntu.com\/?p=93920"},"modified":"2020-02-10T23:32:02","modified_gmt":"2020-02-10T23:32:02","slug":"testing-your-user-contract","status":"publish","type":"post","link":"https:\/\/admin.insights.ubuntu.com\/2020\/02\/10\/testing-your-user-contract\/","title":{"rendered":"Testing
        your user contract"},"content":{"rendered":"\n<p>Whenever you write any code
        that is to be consumed by another, \nwhether it be a library or some UI element,
        that consumer expects it to \nwork in a certain way every time they interact
        with it. All good \ndevelopers would agree and that\u2019s why we also write
        tests that either \nbreak our code up into chunks and test that each chunk
        works as \nexpected, unit tests, or test the entire lifecycle, end to end
        tests.<\/p>\n\n\n\n<p>Anyone who has written unit tests for long enough knows
        that they are\n tedious to keep in sync with refactors and often end up taking
        a \ndisproportionate amount of time compared to the time it took to write
        \nthe functional code. I propose that that we focus less on unit tests and\n
        replace them with what I\u2019m calling the <strong>user contract<\/strong>
        of your code.<\/p>\n\n\n\n<h4 id=\"what-is-a-user-contract\">What is a user
        contract?<\/h4>\n\n\n\n<p>The consumer expects that when they perform action
        X, they receive \noutcome Y. Typically they are not concerned about how X
        became Y just \nthat it does so reliably. This is what I\u2019m calling the
        <strong>user contract<\/strong>.\n If we as the authors of the code take the
        same view from a testing \nperspective, it allows us to write simpler tests
        and gives us the \nability to refactor how a library or UI component works
        without having \nto update our tests, dramatically speeding up refactoring.<\/p>\n\n\n\n<p>While
        these examples are written in JavaScript the same techniques apply to all
        languages.<\/p>\n\n\n\n<h4 id=\"library-example\">Library example<\/h4>\n\n\n\n<p>Starting
        with a simple library that another developer may be using\u2026<\/p>\n\n\n\n<pre
        class=\"wp-block-code\"><code>export async function fetchUserList() {\n  const
        userList = await _queryDBForUserList();\n  return await _formatUserList(userList);\n}\n\nfunction
        _queryDBForUserList() {\n  \/\/ Fetch content from the database.\n}\n\nfunction
        _formatuserList() {\n  \/\/ Reformat the data as returned from the database.\n}<\/code><\/pre>\n\n\n\n<p>A
        consumer of this API would have a couple expectations:<\/p>\n\n\n\n<ul><li>That
        function is asynchronous.<\/li><li>It returns a user list in a specific structure.<\/li><\/ul>\n\n\n\n<p>These
        expectations then outline what your tests are:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(''fetchUserList'',
        () => {\n  it(''does not block'');\n  it(''returns in the correct format'');\n});<\/code><\/pre>\n\n\n\n<p>You
        should note that we don\u2019t test any method that wasn\u2019t exported,
        nor do we export methods simply for testing purposes.<\/p>\n\n\n\n<p>To aid
        the user in understanding what this contract is you can \noutline it in the
        docblock for the exported function. This way it can be\n used to generate
        the documentation for your library and help outline \nwhat your test structure
        is.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/**\n  Returns a formatted
        user list.\n  @return {Object} The user list in the following format:\n  {
        id: INT, name: STRING, favouriteColour: STRING }\n*\/\nexport async function
        fetchUserList() {\n  const userList = await _queryDBForUserList();\n  return
        await _formatUserList();\n}<\/code><\/pre>\n\n\n\n<p>We don\u2019t explicitly
        test the  <code>_queryFBForUSerList<\/code> and <code>_formatUserList<\/code>\n
        functions as they are implementation details. If you were to change the\n
        type of database returning the user list, or the algorithm being used \nto
        format the user list you should not have to also modify your tests as\n the
        contract to your users has not changed. They still expect that if \nthey call
        <code>fetchUserList<\/code> they will receive the list in the specified format.<\/p>\n\n\n\n<h4
        id=\"ui-example\">UI Example<\/h4>\n\n\n\n<p>Let\u2019s take a look at a UI
        component this time using the React \njavascript library, in an effort to
        save space I\u2019ve removed the \nfunctions that aren\u2019t exported. This
        also helps to illustrate their \nirrelevance in our testing strategy.<\/p>\n\n\n\n<pre
        class=\"wp-block-code\"><code>export const LogIn = ({ children }) => {\n  const
        userIsLoggedIn = useSelector(isLoggedIn);\n  const userIsConnecting = useSelector(isConnecting);\n\n  const
        button = _generateButton(userIsConnecting);\n\n  if (!userIsLoggedIn) {\n    return
        (\n      &lt;>\n        &lt;div className=\"login\">\n          &lt;img className=\"login__logo\"
        src={logo} alt=\"logo\" \/>\n          {button}\n        &lt;\/div>\n        &lt;main>{children}&lt;\/main>\n      &lt;\/>\n    );\n  }\n  return
        children;\n};<\/code><\/pre>\n\n\n\n<p>This is a fairly simple component that
        renders a \nlogin button with a logo. Let\u2019s go through the exercise and
        see what our\n User Contract is:<\/p>\n\n\n\n<ul><li>If the user is not logged
        in\n<ul><li>It renders a logo and button to log in.<\/li><li>It renders any
        children passed to it.<\/li><li>clicking the button logs in.<\/li><\/ul>\n<\/li><li>If
        the user is logged in\n<ul><li>It does not render a logo and button.<\/li><li>It
        renders any children passed to it.<\/li><\/ul>\n<\/li><\/ul>\n\n\n\n<p>Our
        tests would be:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(''LogIn'',
        () => {\n  describe(''the user is not logged in'', () => {\n    it(''renders
        a logo and button to log in'');\n    it(''renders any children passed to it'');\n    it(''clicking
        the button logs in'');\n  });\n  describe(''the user is logged in'', () =>
        {\n    it(''does not render a logo and button to log in'');\n    it(''renders
        any children passed to it'');\n  });\n});<\/code><\/pre>\n\n\n\n<p>Testing
        the returned value in a UI component is a \nlittle more nuanced than checking
        a return value of a library function. \nWe don\u2019t necessarily want to
        check every specific detail of each element\n returned unless it\u2019s part
        of the contract. I\u2019ll expand these tests with\n assertions but eschew
        the component setup and rendering in interest of \nspace.<\/p>\n\n\n\n<pre
        class=\"wp-block-code\"><code>it(''renders a logo and button to log in'',
        () => {\n  expect(wrapper.find(''.login__logo'').length).toBe(1);\n  expect(wrapper.find(''.login
        button'').length).toBe(1);\n);\nit(''renders any children passed to it'',
        () => {\n  expect(wrapper.find(''main .items'').length).toBe(3);\n});\nit(''logs
        the user in'', () => {\n  wrapper.find(''.login button'').simulate(''click'',
        {});\n  expect(useSelector(isLoggedIn)).toBe(true);\n});<\/code><\/pre>\n\n\n\n<p>It\u2019s
        important to note here that we have tried to \nlimit the specific details
        that aren\u2019t relevant to the contract of the \ncomponent. This allows
        the design to change and the contract to remain \nvalid and we do not need
        to update the tests. This is especially \nbeneficial when you have a shared
        component library within your company.\n You can update the designs and implementation
        details of your \ncomponents without updating the tests.<\/p>\n\n\n\n<h4 id=\"what-if-i\">What
        if I\u2026<\/h4>\n\n\n\n<ul><li>\u2026want to test that an api call is being
        made with the correct signature?\n<ul><li>You should consider moving this
        sub api call into its own library and having it tested there. You&#8217;ll
        then be testing the <strong>user contract<\/strong> of this new library, that
        a call to your api is making a specific call to another api.<\/li><\/ul>\n<\/li><li>\u2026have
        to mock out an api call?\n<ul><li>You\u2019ll find value in implementing a
        system that mocks out the layer \nwhich returns the data. In this layer it\u2019ll
        return a pre-defined set of \ndata depending on the arguments it receives.
        This way, if the arguments \never change and become invalid, it\u2019ll no
        longer return the correctly \nformatted outcome and your tests will fail.<\/li><\/ul>\n<\/li><li>\u2026have
        a complex algorithm that needs testing?\n<ul><li>Consider moving this to a
        separate library and test it separately so that the <strong>user contract<\/strong>
        of that library is being tested.<\/li><\/ul>\n<\/li><li>\u2026want to change
        the contract?\n<ul><li>You can release a major version bump of your code.
        See how to use the <a href=\"https:\/\/fromanegg.com\/post\/2014\/04\/25\/when-to-update-your-semver-version-number\/\">semver
        versioning system<\/a>.<\/li><\/ul>\n<\/li><\/ul>\n\n\n\n<h4 id=\"conclusion\">Conclusion<\/h4>\n\n\n\n<p>When
        writing the code and exporting methods, ask yourself if the user\n needs to
        have access to this method or if you\u2019re only doing it for \ntesting purposes.
        You can always export more methods, you can\u2019t always \ntake exported
        methods away.<\/p>\n\n\n\n<p>When writing tests ask yourself how can the consumer
        interact with \nyour code and what type of outcome is expected for those interactions
        \nand them make sure you have those documented and assertions in your \ntests.<\/p>\n\n\n\n<p>Don&#8217;t
        test implementation details of an exported method or UI component. Consider
        moving those to a different <strong>user contract<\/strong> if you feel they
        need direct testing.<\/p>\n\n\n\n<p>This post originally appeared on: <a href=\"https:\/\/fromanegg.com\/post\/2020\/01\/01\/testing-your-user-contract\/\">https:\/\/fromanegg.com\/post\/2020\/01\/01\/testing-your-user-contract\/<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Whenever
        you write any code that is to be consumed by another, whether it be a library
        or some UI element, that consumer expects it to work in a certain way every
        time they interact with it. All good developers would agree and that\u2019s
        why we also write tests that either break our code up [&hellip;]<\/p>\n","protected":false},"author":455,"featured_media":93927,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1453],"tags":[1239,2598,2929],"topic":[3406],"group":[3407],"_event_location":"","_event_venue":"","_event_registration":"","_start_day":"10","_start_month":"02","_start_year":"2020","_end_day":"10","_end_month":"02","_end_year":"2020","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/93920"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/455"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=93920"}],"version-history":[{"count":3,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/93920\/revisions"}],"predecessor-version":[{"id":93923,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/93920\/revisions\/93923"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/93927"}],"wp:attachment":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?parent=93920"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/categories?post=93920"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags?post=93920"},{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=93920"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=93920"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]},"_embedded":{"author":[{"id":455,"name":"Jeff
        Pihach","url":"","description":"Jeff is a software engineer on the Juju UI
        Engineering team.","link":"https:\/\/admin.insights.ubuntu.com\/author\/hatch\/","slug":"hatch","avatar_urls":{"24":"https:\/\/secure.gravatar.com\/avatar\/7810b1e116b16104401824099475647e?s=24&d=mm&r=g","48":"https:\/\/secure.gravatar.com\/avatar\/7810b1e116b16104401824099475647e?s=48&d=mm&r=g","96":"https:\/\/secure.gravatar.com\/avatar\/7810b1e116b16104401824099475647e?s=96&d=mm&r=g"},"user_job_title":"","user_website_title":"","user_google":"","user_twitter":"","user_facebook":"","user_photo":"","user_location":"","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/455"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users"}]}}],"wp:featuredmedia":[{"id":93927,"date":"2020-02-10T23:31:33","slug":"testing","type":"attachment","link":"https:\/\/admin.insights.ubuntu.com\/2020\/02\/10\/testing-your-user-contract\/testing\/","title":{"rendered":"testing"},"author":297,"caption":{"rendered":""},"alt_text":"","media_type":"image","mime_type":"image\/jpeg","media_details":{"width":1200,"height":799,"file":"testing.jpg","image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":"","orientation":"0","keywords":[]},"sizes":{}},"source_url":"https:\/\/admin.insights.ubuntu.com\/wp-content\/uploads\/cfc2\/testing.jpg","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/93927"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/attachment"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/297"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=93927"}],"wp:term":[{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=93927"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=93927"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],"wp:term":[[{"id":1453,"link":"https:\/\/admin.insights.ubuntu.com\/category\/articles\/","name":"Articles","slug":"articles","taxonomy":"category","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/categories\/1453"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/categories"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/category"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?categories=1453"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?categories=1453"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":1239,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/design\/","name":"Design","slug":"design","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/1239"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=1239"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=1239"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2598,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/development\/","name":"Development","slug":"development","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/2598"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=2598"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=2598"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2929,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/testing\/","name":"testing","slug":"testing","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/2929"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=2929"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=2929"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":3406,"link":"https:\/\/admin.insights.ubuntu.com\/topic\/design\/","name":"Design","slug":"design","taxonomy":"topic","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic\/3406"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/topic"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?topic=3406"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?topic=3406"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?topic=3406"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":3407,"link":"https:\/\/admin.insights.ubuntu.com\/group\/design\/","name":"Design","slug":"design","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/3407"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=3407"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=3407"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=3407"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]]}}]'}
    headers:
      Access-Control-Allow-Headers: ['Authorization, Content-Type']
      Access-Control-Expose-Headers: ['X-WP-Total, X-WP-TotalPages']
      Allow: [GET]
      Connection: [Keep-Alive]
      Content-Type: [application/json; charset=UTF-8]
      Date: ['Tue, 09 Jun 2020 13:52:22 GMT']
      Keep-Alive: ['timeout=5, max=100']
      Link: ['<https://admin.insights.ubuntu.com/wp-json/>; rel="https://api.w.org/"']
      Server: [Apache/2.4.7 (Ubuntu)]
      Transfer-Encoding: [chunked]
      Vary: ['Origin,Cookie']
      Via: [1.1 juju-prod45-is-insights-blog-machine-16 (squid/3.3.8)]
      X-Cache: [MISS from juju-prod45-is-insights-blog-machine-16]
      X-Cache-Lookup: ['HIT from juju-prod45-is-insights-blog-machine-16:8080']
      X-Content-Type-Options: [nosniff]
      X-Powered-By: [PHP/5.5.9-1ubuntu4.29]
      X-Robots-Tag: [noindex]
      X-WP-Total: ['1']
      X-WP-TotalPages: ['1']
    status: {code: 200, message: OK}
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      User-Agent: [python-requests/2.22.0]
    method: GET
    uri: https://admin.insights.ubuntu.com/wp-json/wp/v2/posts?tags=1239%2C2598%2C2929&per_page=3&page=1&exclude=93920&_embed=true
  response:
    body: {string: '[{"id":96269,"date":"2020-06-09T09:26:02","date_gmt":"2020-06-09T09:26:02","guid":{"rendered":"https:\/\/admin.insights.ubuntu.com\/?p=96269"},"modified":"2020-06-09T13:47:07","modified_gmt":"2020-06-09T13:47:07","slug":"design-and-web-team-summary-9th-june-2020","status":"publish","type":"post","link":"https:\/\/admin.insights.ubuntu.com\/2020\/06\/09\/design-and-web-team-summary-9th-june-2020\/","title":{"rendered":"Design
        and Web team summary \u2013 9th June 2020"},"content":{"rendered":"\n<p>The
        web team here at Canonical run two-week iterations. Here are some of the highlights
        of our completed work from this iteration.<\/p>\n\n\n\n<h2>Meet the team<\/h2>\n\n\n\n<p>&#x1f44b;
        My name is Sam, and I am a project manager on the web team.<br><\/p>\n\n\n\n<p>I
        help run a few of our squads in the web team. The web squad, vanilla squad
        and the brand squad. This means I get to see how different disciplines work
        and help them form plans to achieve their objectives. I really enjoy seeing
        squad members work well together to get stuff done!<br><\/p>\n\n\n\n<p>Before
        I came to Canonical, I worked in a small branding studio, working on a range
        of different projects, from digital brand hierarchies to cold-brew labels!&nbsp;<br><\/p>\n\n\n\n<p>When
        I am not being a project manager I like to unwind by cooking something a bit
        bougie or by playing games on my PS4.&nbsp;<\/p>\n\n\n\n<h2>Web squad<\/h2>\n\n\n\n<p>Our
        Web Squad develops and maintains most of <a href=\"https:\/\/github.com\/search?q=topic%3Awebsite+org%3Acanonical-web-and-design&amp;type=Repositories\">Canonical\u2019s
        promotional sites<\/a> like <a href=\"https:\/\/ubuntu.com\/\">ubuntu.com<\/a>,
        <a href=\"https:\/\/canonical.com\/\">canonical.com<\/a> and more.<\/p>\n\n\n\n<h3>A
        new \u201cWhat is Kubernetes\u201d page<\/h3>\n\n\n\n<p>Following the success
        of our other popular \u201cWhat is\u201d pages, we created one for Kubernetes.
        It explains a bit of the history of the project, who the main contributors
        are and the key concepts and terms around the Kubernetes project.<\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh6.googleusercontent.com\/ei7Sw7Tmst7fsOjKJcAGCl88X9-zFhqKTos_YyOI-6zOyZkUdn56eFLSC5-CV4AldnDjjGa7fCgwI1EtAznYkWfdJ3O1bmVqgGk3hfksQa7zFzIi7knCUcMRJsljnLRBwfPhoXaC\"
        alt=\"\"\/><\/figure>\n\n\n\n<p><a href=\"https:\/\/ubuntu.com\/kubernetes\/what-is-kubernetes\">Visit
        the \u201cWhat is Kubernetes\u201d page &gt;<\/a><\/p>\n\n\n\n<h3>New managed
        app &#8211; Kafka<\/h3>\n\n\n\n<p>We published a new page for our managed
        application &#8211; Kafka.&nbsp; And we created a takeover for an associated
        webinar.<br><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh3.googleusercontent.com\/k48N5pjudBwasIdqreH-nJ_a3ihitoar6A5tan8B8h-YuAp2-QiwEiAMmgCmR4fv0h9k5568PFso9DkvOgsKiztxp-IewKm4as7r2rfYc8pNvneb7WOtHIrecZgyBoNtMpL2GTUQ\"
        alt=\"\"\/><\/figure>\n\n\n\n<p><a href=\"https:\/\/ubuntu.com\/managed\/kafka\">Visit
        the Kafka webpage &gt;<\/a><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/GDF2n1oyoc6_8_FD8snxF_iP2RQ1Kq1JhNJEmpBuTmxXbSvE5B-bf5Gi22JOS4bVrSOeSgEgPmEMrH1xdfrXo7nP-i4IfPnFNt2S1Iep9okgxoSkCrDh4ELXgVBGqsBCKvdIIiUR\"
        alt=\"\"\/><\/figure>\n\n\n\n<p><a href=\"https:\/\/ubuntu.com\/engage\/kafka-in-production?utm_source=Takeover&amp;utm_medium=web-blog-postr&amp;utm_campaign=CY20_DC_ManagedApps_WBN_KafkainProd\">Watch
        the webinar &gt;<\/a><br><\/p>\n\n\n\n<h3>Azure and cloud-init webinar<\/h3>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh4.googleusercontent.com\/tV0VgAaLfF5otB4uG39IBiCxTdR7-bJRDp4y-dLEsxg4QWFJswkTKKo9VPduXJoSRo4B6tHBzBFeKd0EUPbEMG5KflJ4hOADU9WFtC00ZzKuFrL54oZnLygYyASwmSpq4BafACil\"
        alt=\"\"\/><\/figure>\n\n\n\n<p><a href=\"https:\/\/ubuntu.com\/engage\/ml-dell-webinar?utm_source=Takeover&amp;utm_medium=web-blog-post&amp;utm_campaign=CY20_DC_DELL_AI_WBN_MLtoProduction\">Watch
        the webinar &gt;<\/a><\/p>\n\n\n\n<h3>Microk8s website updates<\/h3>\n\n\n\n<p>We
        updated the <a href=\"https:\/\/microk8s.io\/\">microk8s.io website<\/a> for
        the announcement that MicroK8s now native on Windows and macOS.&nbsp; We completely
        updated the homepage and made the install instructions a lot easier to follow.<br><\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh4.googleusercontent.com\/qkqg-7-QwWqNxR6cTAuZAI16GRHXpG6hBjZNFUKm-cDsBLyrMJxSrVUc5sYtXHQH3pGEPl08NvrTDTcBBfe1XY7AUtm3Ql_kRoCqM74iCmEeFGNLdObZd5QNTebujTlu-SJxjmyu\"
        alt=\"\"\/><\/figure>\n\n\n\n<p>We have also updated the microk8s documentation
        to be pulled in from the official <a href=\"https:\/\/discuss.kubernetes.io\/t\/introduction-to-microk8s\/11243\">Kubernetes
        Discourse site<\/a>. This is interesting as it is the first time our documentation
        is being maintained in a non-Canonical hosted Discourse.<br><\/p>\n\n\n\n<p><a
        href=\"https:\/\/microk8s.io\/\">Visit the new microk8s website &gt;<\/a><br><\/p>\n\n\n\n<h3>Testing
        sprint<\/h3>\n\n\n\n<p>A few of us spent some time this week focusing on the
        testing across 100+ projects to work on standardisation and improvements.<\/p>\n\n\n\n<h4>Standardise
        automated checks (CI)<\/h4>\n\n\n\n<p>We have been gradually migrating our
        projects to use GitHub Actions, as they are better integrated into GitHub
        where we do most of our work. This week, we migrated many of our projects
        from CircleCI and Travis to GitHub Actions, and we will be continuing to hopefully
        move everything in the coming weeks.<br><\/p>\n\n\n\n<p>We also updated the
        recommended checks in our <a href=\"https:\/\/canonical-web-and-design.github.io\/practices\/workflow\/automated-checks.html\">automated
        checks standard<\/a> and we added these standard checks to many more projects.<br><\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh5.googleusercontent.com\/-G7mo-Bg9bP7djILR-fqbYw9A-FzdMCgDxvHvNv5ZbMnfjVCtgXAQmQsNUMA7gA7hQiGRKkHpWL-ZxfIUT_itX77PniZhxRwvlgOtYMiGKMeY02M8O9MkpJkPgwXa1O1xGE9WfCP\"
        alt=\"\"\/><\/figure>\n\n\n\n<h4>JavaScript pipeline and test coverage<\/h4>\n\n\n\n<p>We\u2019ve
        started to standardise our JavaScript build pipeline across all (non-React)
        projects, around webpack. This pipeline includes a framework for testing and
        reporting coverage with codecov.io.<br><\/p>\n\n\n\n<p>We added structure
        to many of our website projects.<\/p>\n\n\n\n<h4>Linkchecker<\/h4>\n\n\n\n<p>We
        have been using <a href=\"http:\/\/manpages.ubuntu.com\/manpages\/cosmic\/man1\/linkchecker.1.html\">linkchecker<\/a>
        for a while to check both internal and external links <a href=\"https:\/\/github.com\/canonical-web-and-design\/ubuntu.com\/actions?query=workflow%3A%22Links+in+master%22\">on
        ubuntu.com<\/a>.<br><\/p>\n\n\n\n<p>This week, we considered how to expand
        this to other websites. We decided we should automatically collect information
        about broken links in a spreadsheet. To help with this, we wrote our first
        GitHub Action &#8211; <a href=\"https:\/\/github.com\/marketplace\/actions\/google-spreadsheet-csv-importer\">Google
        Spreadsheet CSV importer<\/a>.<\/p>\n\n\n\n<h3>Ubuntu advantage renewals<\/h3>\n\n\n\n<h4>Renewals
        functionality released<\/h4>\n\n\n\n<p>We released the ability to renew existing
        enterprise subscriptions via <a href=\"https:\/\/ubuntu.com\/advantage\">the
        advantage dashboard<\/a>. When a subscription is soon to expire, customers
        will receive an email notification directing them to the dashboard, where
        they\u2019ll be able to process a payment directly.<br><\/p>\n\n\n\n<p>This
        project represents a huge amount of work and collaboration from teams across
        the company, and is the first step towards a larger ecommerce experience on
        the Ubuntu Advantage dashboard.<br><\/p>\n\n\n\n<h4>Future design vision for
        renewals<\/h4>\n\n\n\n<p>The idea is to visually build up your fleet subscription
        in a simple UI and purchase support easily.&nbsp;<\/p>\n\n\n\n<h2>Brand<\/h2>\n\n\n\n<p>The
        Brand team develop our design strategy and create the look and feel for the
        company across many touch-points, from web, documents, exhibitions, logos
        and video.<br><\/p>\n\n\n\n<h3>Document Hierarchy<\/h3>\n\n\n\n<p>We progressed
        our document hierarchy work by applying our initial investigations into design
        prototypes, experimenting with the amount of branding applied to different
        documents.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh3.googleusercontent.com\/-IAdmyGdq7D_jUlXzipFNu7uhG6PbRoRuYs2_719tHafNVXqNXzhLyFpc_UzohSCOqm7puzufukxBqKrlyjbMGiHaPDsNla8HN1uwQsO1c9z8JKP1XnWd1hKKfi06IyJ2T8NhpkI\"
        alt=\"\"\/><\/figure>\n\n\n\n<h3>WSL logo<\/h3>\n\n\n\n<p>The WSL logo ideas
        were narrowed down and worked up during this iteration, finalising the positioning
        and colours.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh6.googleusercontent.com\/L7Il4E-bxYtIgD_JKlV3730DIE6FVuTlHfPA7TrvHPunpt_LA1gcrrHYU37NL0mVwRGjBR4AwOz19khanWPZqNRY3pp-jVaKw2cmfEZs8a-_4f0B4JByRnXRy8VNSKkwIRCHendl\"
        alt=\"\"\/><\/figure>\n\n\n\n<h3>Robotics illustrations<\/h3>\n\n\n\n<p>Working
        with the robotics project managers we progressed the initial ideas into finished
        illustrations for use in upcoming promotions.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh5.googleusercontent.com\/uzg4oL0PbBSIp7Nf2yMUsre0sRMGntqGZpOCZ1e5LJUQjDWjSSDz4_oIZEtYqoaZ3FOFEf4vwYKFNIp1kEP7jjRBie_AZCB1wvyvSNrlZJ86kVH94v63IRTpPjThw1vsrROmL2i3\"
        alt=\"\"\/><\/figure>\n\n\n\n<h3>Partner Portal<\/h3>\n\n\n\n<p>We have been
        working with the Marketing team and external suppliers to provide design support
        for the new Canonical Partner Portal, keeping it inline with the recently
        updated canonical.com to make the user journey as seamless as possible.<\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh5.googleusercontent.com\/sFOv72tuu4vv_BzuIfHISUnMOxs7O1v_zwgcWvxzBjdF4tZcOrJkhgIkCoh8fuCZugQhH_ENw5vJm3UrUY23_jOsP05ONTFt44nmDpJmTSLkgp1r8jj2z5s330HzDvmlyerD7Cf7\"
        alt=\"\"\/><\/figure>\n\n\n\n<h2>MAAS<\/h2>\n\n\n\n<p>The MAAS squad develops
        the UI for the <a href=\"https:\/\/launchpad.net\/maas\">MAAS project<\/a>.<br><\/p>\n\n\n\n<h3>Focus
        on 2.8 release<\/h3>\n\n\n\n<p>The final RC has been released so we are QA\u2019ing
        all aspects of the UI to check it works well for the upcoming release.<br><\/p>\n\n\n\n<h3>MAAS
        documentation improvements<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/qovbBH1JCTj_xmedWh3xeC2Ycl1D-l2vKbaGrtkAg5ADYz_lPWuc-tnsCPwg_-SHcFatRlvEPfDJ5IgIkXkQeHu3nydQNeUPx51vJoPPSIQkE2y995xCeW0lKTkbKCdx2yGSsze0\"
        alt=\"\"\/><\/figure>\n\n\n\n<p>The journey to discover how to improve MAAS.io
        is still ongoing! Last week after trying to determine the current user journey
        for our Technical Writers, this week we are exploring the behavior of our
        Documentation readers. We have currently just identified two search behavior
        patterns such as transactional search behavior and contextual search behavior.
        The difference between the 2 is that transactional searches are on point searches,
        for people who are familiar with the concept and only needed examples. The
        latter one describes the behavior of users whose goal is to understand the
        big picture concept.<br><\/p>\n\n\n\n<p>The question is how does this search
        behavior impact our current design and how might we help our users search
        and navigate to the content that they are looking for easily.<\/p>\n\n\n\n<p><\/p>\n\n\n\n<h3>UX
        exploration into mini graphs<\/h3>\n\n\n\n<p>The team are aiming to tackle
        a refresh of the KVM section of MAAS and part of that is the in table mini
        graphs to give a summary of usage across the machines.<br><\/p>\n\n\n\n<p>After
        reviewing a number of users across the company the findings show that many
        people thought the mini graphs were just an estimated summary and not an absolute
        representation of the allocation of resources.&nbsp;<br><\/p>\n\n\n\n<p>The
        main question was did people understand the representation of overcommitted
        values. Many needed to view the tooltip on hover to understand what the different
        borders represented.&nbsp;<br><\/p>\n\n\n\n<p>This research has led us to
        three options which will be iterated on.<br><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/D111GCzNt9eYhvC4UGfrU_vsEMbw_QGHPmol4SduJSUwADv1BZk9MxtzIwZbIN23CZWCeyeeJISksrmFlVkGFgMBuosjaTo88jw7CMSQ2uwmS_75rlI843HQPbxTx8eueTBTUodL\"
        alt=\"\"\/><\/figure>\n\n\n\n<p><\/p>\n\n\n\n<h2>JAAS<\/h2>\n\n\n\n<p>The
        JAAS squad develops the UI for the <a href=\"https:\/\/jaas.ai\">JAAS store<\/a>
        and <a href=\"https:\/\/jaas.ai\/models\">Juju dashboard<\/a> projects.<\/p>\n\n\n\n<h3>Juju
        2.8 release including the new dashboard<\/h3>\n\n\n\n<p>Juju 2.8 has been
        released which includes a new command `juju dashboard` which will open the
        brand new GUI. A shift in direction from the preceding Juju GUI which had
        a focus on the deployment of models. The new Dashboard is focused on the operations
        and observability of your Juju models across one or more controllers.<\/p>\n\n\n\n<p><a
        href=\"https:\/\/discourse.juju.is\/t\/new-feature-in-juju-2-8-juju-dashboard\/3188\">Post
        on Discourse<\/a><\/p>\n\n\n\n<h3>Explorations on layout, model detail page
        with apps\/units\/machines views<\/h3>\n\n\n\n<h4>Model list page<\/h4>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh6.googleusercontent.com\/am7YZ80_Gme341O9C7ZJLRtHy5XpG70G1q2YT_Ke-CoaNf6MwCeWr26qmDyxHr1JR0q3dFz2mAgr4MradKK5HrytelQH_YnXyUS1yrY12ziCuu1SRsR2sogI5R4O3waxOM7BFnGF\"
        alt=\"Iteration%20II%20-%20Model%20list%20view\"\/><\/figure>\n\n\n\n<p>Exploration
        on a layout to align our web applications and the modular table pattern to
        be used across products.<\/p>\n\n\n\n<p>Considering the use-case of large
        models with hundreds or thousands units and machines, we explored a couple
        of options on how the model view could scale up to these numbers.<\/p>\n\n\n\n<h4>Model
        detail page, Option A<\/h4>\n\n\n\n<p>The default view of the model detail
        page would display only apps and relations, adding three views \u201capps
        | units | machines\u201d on top:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh3.googleusercontent.com\/Oo8OfQ6OkH2beZoZMKqbFiRXEPjJhDpZNmL_twtaxAU_aZ4UnRQVe6e0jvOxq9otpnhFAN7Tv_EV24z7hOWwBylSz64rYhodRA_Fd_PuwIZqI_6IftA5XrHM5K8N3hd-rcrwMsT2\"
        alt=\"apps%20view%20A\"\/><\/figure>\n\n\n\n<p>Click on an app, reveals a
        panel with relevant information:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh4.googleusercontent.com\/KhHakLGdH1rlXJRhzC7ytpLKGL3jLTHA9QSoc05YvrkIe1ANMNiKZwNYjtIitRicVNSYRp1Y0UXSCigFO-LksKVNqvLJvbVaGzKKW75CVQMAoFkESqnL7BpPm1H_9yUEtWv2UXEF\"
        alt=\"app%20A\"\/><\/figure>\n\n\n\n<p>Additional information about the store\/charm,
        latest logs, units and machines related to the app<\/p>\n\n\n\n<h4>Model detail
        page, Option B &#8211; Model status:<\/h4>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh3.googleusercontent.com\/rqQ6d0MiBV5TOTBkLHHvus4d5bJk2mKQbnyQw3ef_FQ4wQOEUi_wJ3S0_mA5p9dEi26jol4K8eD8PW91JqHBbgV4McJJrarLNkm8b3tvOurEmrKrEihiXr6xlT1S5wi74YFIHW7t\"
        alt=\"status%20view%20B\"\/><\/figure>\n\n\n\n<p>The option B is with the
        current model status displays apps, units, machines and relations, but the
        number of displayed units and machines is limited: \u201c54 more units\u201d
        in the example would open the units view (that can be accessed from the \u201cstatus
        | units | machines\u201d on top, too)<\/p>\n\n\n\n<p>Panel on selection:<\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh6.googleusercontent.com\/KkDQRQMWNJe8XD8KC5fiCg9uEWPV4FKWJSVbNsWVSOI-zf5To4nsBFGrZMQGDh6wSbpxvkSHJMDeVgL2JkGaS47HwTb1BRH6BWUvYXiuk5RqIcEBUHv8znxRCrRGCuNt14DsLUI6\"
        alt=\"Status%20view%20-%20app%20B\"\/><\/figure>\n\n\n\n<p>The other tabs,
        Units and Machines, would display a consistent approach from units and machines
        point of view.<\/p>\n\n\n\n<h4>Machines view<\/h4>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/4sg8Mr5Q7ZVttDRfXFVMlj56cpg3yS9cIhtjf-dOF56AHyRPen2964MjYJLOsOD82ecj0MNtOZBkcEyb38YdzQpEQ5PM6ctawarBe0C9m--k2oX-b8BB8Q8pugXTrrEwEiczX1Py\"
        alt=\"Machines%20view%20SSH\"\/><\/figure>\n\n\n\n<p>Clicking on a specific
        machine would reveal the panel:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh4.googleusercontent.com\/6NTJs3mk8OT-kGbvksbQI7oFkcTffzp8149dMPfzGyYS45PcujgdijJzLEMtHpPEFVmKWbo0Uz4wUHWdQnJMHHdN1DKlG0pzpRg1IBI6ofXWPYFxMutyP4qY_5i3qPXQXpY4_akl\"
        alt=\"Machines%20view\"\/><\/figure>\n\n\n\n<p>With more information on the
        constraints \/ performance of the machine, the units running on it and the
        latest logs.<\/p>\n\n\n\n<h4>Units view<\/h4>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh4.googleusercontent.com\/vt_6Ux6kKUumc0S3y8EcwaHrYTHMXhgfxFY0TAtxLfytcBz0C66e9AKKM0Yrl_Z5tr_5cyYyJ7kRtwDvUWEaigdPcPhf6r60RjjlJNP9wzZ_OZmCGiDUujT8lTP-AhWaoLu4dOpw\"
        alt=\"Units%20view\"\/><\/figure>\n\n\n\n<p>And the panel:<\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh3.googleusercontent.com\/sUyAcdySyLZbMMkv9mOIcbuDgJReiIKrwU0sHM4bzCotLlHQHZoXyAPEZ6G3UYX7bc0M2EMKrqL7OXRzr3oR4nRz1ECYtpbngr8I_qXL1m8GYINdyqf6BmeFNtk2RTL4cEOgy3ok\"
        alt=\"Units%20view%201\"\/><\/figure>\n\n\n\n<p>With more information on the
        logs, and the machine the unit is running on.<\/p>\n\n\n\n<p><a href=\"https:\/\/discourse.juju.is\/t\/dashboard-explorations-on-layout-model-detail-page-with-apps-units-machines-views\/3179\">Post
        on Discourse, feedback welcome!<\/a><\/p>\n\n\n\n<p><\/p>\n\n\n\n<h3>Finalising
        the search and filtering UX<\/h3>\n\n\n\n<p>In this cycle, our team is implementing
        the Combo Search and filter pattern on the Juju Dashboard, where both search
        and filtering functions could be performed on one bar. The user can pick the
        filter chips from a menu, or type and submit direct keywords to query the
        table data.<\/p>\n\n\n\n<h4>Filtering result as a chip added<\/h4>\n\n\n\n<p>Clicking
        on the search bar will activate the pattern, a menu with categories and available
        filter chips will show. The user can select and de-select chips from the menu,
        selected ones will be applied as filters and shown in the search bar. The
        table will be filtered as soon as a filter is applied, no extra submission
        needed.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh6.googleusercontent.com\/l92EVqKhdEFdg5zOwXHuZo-l_bK10vXNzJmenmXO939CcHEZOTgLBavrsU_fMSe9EvOaH1947YeTv4qYBMWAuYAhiN44Uq7kzfOww8FDjKTEdvrBnvpI90oSnlp7IpyfoP7MLZfB\"
        alt=\"Select%20a%20filter%20chip\"\/><\/figure>\n\n\n\n<h3>Keywords submitted
        as a chip<\/h3>\n\n\n\n<p>When the user starts typing and hit \u2018enter\u2019
        to submit a keyword chip (e.g. \u2018cl\u2019 in the example), the table will
        be filtered to models containing data with matched characters \u2018cl\u2019
        from the beginning of the word (e.g. \u2018claudio\u2019, \u2018clive\u2019
        but not \u2018accli\u2019).<\/p>\n\n\n\n<p>The filtered table will highlight
        the matched characters in bold.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/qSojcl8TeirAPSz1qWz9wuJNcErvUdPmVJJ5ybE89vVyS-Fn6oVvHMKd_rRqLsOMv5CsD_1bGoTEEXrFFrFl1YXMIAoSqrIGB4zHVdPsil6l8bmSpGS6yClso0REjhFbmAsEhTlJ\"
        alt=\"type%20''cl''\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/_vYTgLyiQ0Vpejy7120CLDR1SGAohIbsAnTPyd1gwn7_aVdRfeFP7pFQeDxKlCQD8tWks-Xw-FyPEwsELOTxxIoPis8_ctUKW_JY1kdD4oUJ-H7Kc0j-3k2F8ScOXm4uiHOjMczs\"
        alt=\"key%20word%20submitted%20as%20''cl''%20and%20table%20is%20filtered%20with%20keyword%20highlited\"\/><\/figure>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh3.googleusercontent.com\/SupURCnA1ftzKr5EtNTHC4KABjGEJBymKemgEqfJyKtvxL914Q7vi5SSgVtItCS2ej-Ex23n2yaHkPLfVOh4z8tJO_XgFS6mHcYvggmSktYK919xqoKWGr5TuPc9IT8pQo1ceuMp\"
        alt=\"table%20filtered%20with%20highlighted%20''cl''\"\/><\/figure>\n\n\n\n<h3>Chips
        Overflow<\/h3>\n\n\n\n<p>There will be situations where multiple chips are
        selected and couldn\u2019t fit into one row in the search box. We designed
        an \u2018expandable indicator\u2019 formatted as \u2018+2\u2019, when on click
        the search box will expand and show all chips applied. This is how its look
        and feel on JAAS dashboard:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/cYVljTSLoGv9lpxpCVWXC_hMDilZuaR4gwMutZXFyRPM0I_LvEZ5hxHOeua5C9oHrMjzEzUas5NKUg4DK01FD5xn6eI2Z11CAhtyNt5ea4JDxBD9vMHtORAUVfTJluXeBFKuQY9h\"
        alt=\"Chips%20overflow\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh4.googleusercontent.com\/Nuwqf3Kb_-N2RGyWhLiZhzgWViX7umACYNOFUqMLpijsm4vZPuSYvEXCcpmcLr0dXc9uDiae6wcPuYc9Lgi9r1FCjrCy43B1aqbiIXLcttezdZkXTZOH1K_3aIrwfhW5CctuWFW9\"
        alt=\"click%20''%201''%20to%20see%20hidden%20chips\"\/><\/figure>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh3.googleusercontent.com\/rZlri4aVr6RQGojLFRXYqIUnaEByWrFg2BsPAvvZCLrXv0ECQeEXkcFYnGhEqsMgEW3l26V4aI4gpzVtDMi7uCtibWhs-kz3h1Fy8Io6MgkmAvkfQ_TVRegB4cE66ZR2AL56FcvE\"
        alt=\"click%20to%20add%20more\"\/><\/figure>\n\n\n\n<p><a href=\"https:\/\/discourse.juju.is\/t\/dashboard-combo-search-and-filter-pattern\/3185\">Post
        on Discourse, feedback welcome!<\/a><\/p>\n\n\n\n<h3>Discourse category<\/h3>\n\n\n\n<p>New
        UX &amp; Design category is a place to collect explorations, ideas, suggestions
        and feature requests for our Juju-related products, focusing on the user experience
        and on the interface. If you are interested in future improvements to the
        UX of Juju feel free to join in and subscribe.<\/p>\n\n\n\n<h2>Vanilla<\/h2>\n\n\n\n<p>The
        Vanilla squad designs and maintains the design system and <a href=\"https:\/\/vanillaframework.io\">Vanilla
        framework library<\/a>. They ensure a consistent style throughout web assets.<\/p>\n\n\n\n<h3>Vanilla
        2.12 releases<\/h3>\n\n\n\n<p>Two weeks ago we released Vanilla 2.12 (which
        included updates from previous iteration, like muted text and updated icons).
        After another week we also released a patch version 2.12.1 which includes
        several bug fixes and improvements.<\/p>\n\n\n\n<h3>Research into a React
        table<\/h3>\n\n\n\n<p>We spent some time reviewing existing React table components
        to get inspiration for the interfaces and examples of documentation.&nbsp;<br><\/p>\n\n\n\n<p>Are
        there many features we would like the new table component to support such
        as, multi-select, sorting, expanding table rows, etc.<br><\/p>\n\n\n\n<h3>Search
        and filtering<\/h3>\n\n\n\n<p>We completed the visual design of the search
        and filter pattern and the chip pattern.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh4.googleusercontent.com\/bcE7QD5_04GxfXDM3XTfUpNzkE4WOGZ-W23O4BL9HNFzx8wzl_aRIVaQZNq29-IKqQ0WlOhOsQyN01gH4TbQLnBQtu2DxcTqxX11dgds7dzf2hxLSB6os4Y5rzp4qNOD-zXmV-o0\"
        alt=\"\"\/><\/figure>\n\n\n\n<h2>Snapcraft<\/h2>\n\n\n\n<p>The Snapcraft team
        works closely with the Store team to develop and maintain the <a href=\"https:\/\/snapcraft.io\">Snap
        Store site<\/a>.<br><\/p>\n\n\n\n<h3>Certification of charms&nbsp;<\/h3>\n\n\n\n<p>We
        did some research on the concept of doing quality control for charms and bundles,
        to indicate to the Charm Store users that a charm meets some standards. We
        conducted interviews with in-house engineers to find out about their understanding
        of certain terminology, such as certification and verification, in order to
        come up with a label that makes sense to our users.&nbsp;<\/p>\n\n\n\n<h3>Iterative
        improvements to snapcraft.io<\/h3>\n\n\n\n<p>We began working on improving
        the homepage experience of snapcraft.io. Based on the large amount of analytics
        we collect we identified three distinct A\/B tests that are going to be implemented
        over the next few months.&nbsp;<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img
        src=\"https:\/\/lh6.googleusercontent.com\/q_gzIiN7rRSgkpr0MNNNtNlsFyo5cPJ7dPIXaPL7gm6SFCRyM5DHRjS0D0Ed5R68pB3W-0K79wJvP5Uu-O03c6WpyRys_rykwROo9Q0DUXfHidHFK4eSup8GEKdzGBIv80bDJdDL\"
        alt=\"\"\/><\/figure>\n\n\n\n<p>We will be measuring the engagement of users
        and the effectiveness of the changes in order to define the long term strategy
        we will undertake.<br><\/p>\n\n\n\n<h3>CLI output alignment<\/h3>\n\n\n\n<p>After
        the amazing work our team did on aligning the CLI commands for some of our
        products, this time we are tackling the output of those commands and will
        be working on ensuring all of it is useful for its context. This is a very
        long-term piece of work so it will be quite constant in our updates from now
        on!&nbsp;<br><\/p>\n\n\n\n<h3>Autopublish Konf Snap from GitHub Actions<\/h3>\n\n\n\n<p>We
        are working on a snap that we will use in our deploy process. The snap is
        in charge of generating the Kubernetes configuration that we are going to
        apply in production from small configuration files. We have included a <a
        href=\"https:\/\/github.com\/canonical-web-and-design\/deployment-configs\/blob\/master\/.github\/workflows\/publish.yaml\">GitHub
        action that will automatically publish the Snap to stable<\/a> whenever the
        repository is updated.<\/p>\n\n\n\n<h2>Team blog posts:<\/h2>\n\n\n\n<ul><li><a
        href=\"https:\/\/ubuntu.com\/blog\/building-a-cross-framework-ui-with-single-spa-in-maas-2-8\">Building
        a cross-framework UI with single-spa in MAAS 2.8<\/a><\/li><li><a href=\"https:\/\/discourse.juju.is\/t\/new-feature-in-juju-2-8-juju-dashboard\/3188\">New
        feature in Juju 2.8: Juju Dashboard<\/a><\/li><li><a href=\"https:\/\/discourse.juju.is\/t\/dashboard-explorations-on-layout-model-detail-page-with-apps-units-machines-views\/3179\">[Dashboard]
        Explorations on layout, model detail page with apps\/units\/machines views<\/a><\/li><li><a
        href=\"https:\/\/discourse.juju.is\/t\/dashboard-machines-view-and-ssh-to-machine\/3159\">[Dashboard]
        Machines View and SSH to machine<\/a><\/li><li><a href=\"https:\/\/discourse.juju.is\/t\/jaas-dashboard-the-new-juju-gui\/2978\">JAAS
        Dashboard, the new Juju GUI<\/a><\/li><\/ul>\n\n\n\n<p>We wish good health
        for you and your families during these uncertain times.<br><\/p>\n\n\n\n<p>With
        &#x2665; from Canonical web team.<br><\/p>\n","protected":false},"excerpt":{"rendered":"<p>The
        web team here at Canonical run two-week iterations. Here are some of the highlights
        of our completed work from this iteration. Meet the team &#x1f44b; My name
        is Sam, and I am a project manager on the web team. I help run a few of our
        squads in the web team. The web squad, [&hellip;]<\/p>\n","protected":false},"author":279,"featured_media":91306,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[],"tags":[1239],"topic":[3406],"group":[3407],"_event_location":"","_event_venue":"","_event_registration":"","_start_day":"09","_start_month":"06","_start_year":"2020","_end_day":"09","_end_month":"06","_end_year":"2020","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96269"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/279"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=96269"}],"version-history":[{"count":2,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96269\/revisions"}],"predecessor-version":[{"id":96271,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96269\/revisions\/96271"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/91306"}],"wp:attachment":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?parent=96269"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/categories?post=96269"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags?post=96269"},{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=96269"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=96269"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]},"_embedded":{"author":[{"id":279,"name":"Anthony
        Dillon","url":"https:\/\/login.ubuntu.com\/+id\/ewTT7fL","description":"Anthony
        Dillon is a Lead Web Developer in the web and design team. The team is responsible
        for all websites and tooling across Canonical. Anthony loves to create beautiful
        things and push the boundaries of the web.","link":"https:\/\/admin.insights.ubuntu.com\/author\/ya-bo-ng\/","slug":"ya-bo-ng","avatar_urls":{"24":"https:\/\/secure.gravatar.com\/avatar\/561e793b1c9e05d3cb3a8897ef6a14f9?s=24&d=mm&r=g","48":"https:\/\/secure.gravatar.com\/avatar\/561e793b1c9e05d3cb3a8897ef6a14f9?s=48&d=mm&r=g","96":"https:\/\/secure.gravatar.com\/avatar\/561e793b1c9e05d3cb3a8897ef6a14f9?s=96&d=mm&r=g"},"user_job_title":"Lead
        Web Developer","user_website_title":"","user_google":"anthonydillon","user_twitter":"anthonydillon","user_facebook":"","user_photo":"","user_location":"","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/279"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users"}]}}],"wp:featuredmedia":[{"id":91306,"date":"2019-08-19T13:17:03","slug":"design-and-web-team-blog-2","type":"attachment","link":"https:\/\/admin.insights.ubuntu.com\/2019\/08\/19\/design-and-web-team-summary-16-august-2019\/design-and-web-team-blog-2\/","title":{"rendered":"Design-and-Web-Team-Blog"},"author":297,"caption":{"rendered":""},"alt_text":"","media_type":"image","mime_type":"image\/jpeg","media_details":{"width":875,"height":490,"file":"Design-and-Web-Team-Blog.jpg","image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":"","orientation":"0","keywords":[]},"sizes":{}},"source_url":"https:\/\/admin.insights.ubuntu.com\/wp-content\/uploads\/f680\/Design-and-Web-Team-Blog.jpg","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/91306"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/attachment"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/297"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=91306"}],"wp:term":[{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=91306"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=91306"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],"wp:term":[[],[{"id":1239,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/design\/","name":"Design","slug":"design","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/1239"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=1239"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=1239"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":3406,"link":"https:\/\/admin.insights.ubuntu.com\/topic\/design\/","name":"Design","slug":"design","taxonomy":"topic","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic\/3406"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/topic"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?topic=3406"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?topic=3406"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?topic=3406"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":3407,"link":"https:\/\/admin.insights.ubuntu.com\/group\/design\/","name":"Design","slug":"design","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/3407"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=3407"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=3407"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=3407"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]]}},{"id":96235,"date":"2020-06-05T10:16:38","date_gmt":"2020-06-05T10:16:38","guid":{"rendered":"https:\/\/admin.insights.ubuntu.com\/?p=96235"},"modified":"2020-06-05T10:16:39","modified_gmt":"2020-06-05T10:16:39","slug":"fabrica-your-self-hosted-snap-factory","status":"publish","type":"post","link":"https:\/\/admin.insights.ubuntu.com\/2020\/06\/05\/fabrica-your-self-hosted-snap-factory\/","title":{"rendered":"Fabrica
        &#8211; Your self-hosted snap factory"},"content":{"rendered":"\n<p>There
        are many ways one can go about building snaps. You can do it on your local
        system, by manually running commands in a terminal window. If you have a developer
        account in the <a href=\"https:\/\/snapcraft.io\/store\">Snap Store<\/a>,
        you can use the integrated build functionality to create snaps. You can also
        use Launchpad, Electron Builder or a range of CI\/CD systems. And you can
        also run your own, self-hosted snap building factory!<\/p>\n\n\n\n<h1>Setting
        up shop<\/h1>\n\n\n\n<p><a href=\"https:\/\/snapcraft.io\/fabrica\">Fabrica<\/a>
        is a brand new, early development, locally hosted Web service designed to
        help developers build snaps. The idea behind Fabrica is simple and clever.
        You get an automated system that can hook up remote repositories and build
        snaps whenever there is a change in the source tree. This way, you can manage
        multiple projects and generate up-to-date builds, with little to no interaction.<\/p>\n\n\n\n<p>Fabrica
        consists of two layers:<\/p>\n\n\n\n<ul><li>A simple Web UI that allows you
        to add an unlimited number of publicly available, clonable Git trees. You
        can choose different (or multiple) branches for each tree.<\/li><li>Under
        the hood, Fabrica runs the LXD container service, which spawns container instances,
        inside which the Git trees are cloned and snaps built. You can then \u201cdownload\u201d
        the built snaps, test and use them.<\/li><\/ul>\n\n\n\n<h1>Fabrica prerequisites<\/h1>\n\n\n\n<p>The
        first step is to install and configure the LXD service on your system. If
        you already have it, then you can skip this step. If not, you should install
        the LXD snap, and go through the first-time setup wizard on the command line.
        For most users, the default options will work just fine.<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">snap install lxd<br>sudo lxd init<\/pre>\n\n\n\n<p>Once
        the LXD component is set up, you can install Fabrica:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap
        install fabrica<\/pre>\n\n\n\n<p>After the snap is installed, you will need
        to do just a tiny bit of manual work. Snaps are designed to be self-contained
        applications, with strong security and isolation from the underlying system
        and other software running on it. Granular access to system resources is possible
        through a mechanism called <a href=\"https:\/\/snapcraft.io\/docs\/interface-management\">interfaces<\/a>.
        Some interfaces are <a href=\"https:\/\/snapcraft.io\/docs\/supported-interfaces\">auto-connected<\/a>;
        when you install a snap, the requested resources are provisioned automatically.
        Some, for security reasons, are not.<\/p>\n\n\n\n<p>In this particular case,
        you will need to grant Fabrica permission to access the LXD service, mount-observe
        (read mount table and quota information), and system-observe (read process
        and system information).<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap
        connect fabrica:lxd lxd:lxd<br>snap connect fabrica:mount-observe<br>snap
        connect fabrica:system-observe<\/pre>\n\n\n\n<p>Now, you are all set.<\/p>\n\n\n\n<h1>Fabrica
        in action<\/h1>\n\n\n\n<p>Fabrica runs and listens on port 8000. At the moment,
        the connection is available via HTTP, and there is no secure tunnel or authentication,
        which means you ought to test and run this service over trusted networks only.
        As a project in development, it should receive new features and capabilities
        in the future.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh3.googleusercontent.com\/Y0_uH2nlN5KD2wsMoubdHJPIPQ4TtwlthX8SVDWjyUPb49X7iJ_z7Ouis9lmAayyk12xnaCzGgp_gIgT8gKVQvkqhwrxUJH69ajTR2JPV047kkXzXDvd0gW59Ob0_JZ0uFTXhX6z\"
        alt=\"\"\/><\/figure>\n\n\n\n<p>You can now add repositories. Choose the desired
        project and branch.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/lh3.googleusercontent.com\/Yj8HJLM9-GWBOhWrgkPv1sKkzW3BVTbEEfCu-qbvHJu9PYHKUoz5tc5q7KjQU1kCTV3kZGnI_KmE3TvadgG4IpukP2oHy0TCp19TpoZG4g2cDVDQJLUGCg5zk0FH-xSGflggR_7a\"
        alt=\"\"\/><\/figure>\n\n\n\n<p>Once added, you can manually trigger a build,
        or wait for a scheduled operation. Fabrica polls the added repositories for
        changes every five minutes, and will trigger a build if one is required.<\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh4.googleusercontent.com\/4OhohZEAydRCvZ0kB4PyVR2irBurDhVIKnj8QAPZeGYHh13UGzcd-mOCgmC1cnkStcO_USLP5Hiif7tkJo6YmeAblfsdLBWwe6L34etGocNZGL_8xum_L6h_P7fz1MRoFlSisJwB\"
        alt=\"\"\/><\/figure>\n\n\n\n<p>While a build is running, you can inspect
        what\u2019s happening by clicking on the \u201ci\u201d icon in each build
        line. This will expand the log and show the commands running inside the build
        container, like perhaps the repository data fetch, system update, compilation,
        or other commands. All of this happens in isolation from your underlying system.<\/p>\n\n\n\n<figure
        class=\"wp-block-image\"><img src=\"https:\/\/lh6.googleusercontent.com\/1GhqYCntxbCrVPqquBpc_QQqhwFdK0C8AQ0bUUi2AE3gCJqu7LmR2xvTFXY_UuYv6auXTMcYwo87dHjmMy0qnyvgtB_TOyXz1y8b1nzhGKucQEZIgCw6wFRlQolm4ZnXiEltIFOl\"
        alt=\"\"\/><\/figure>\n\n\n\n<p>Once the snap is built, you can use the \u201cDownload\u201d
        button to fetch it from inside the container build environment and place it
        somewhere on your disk. And that\u2019s it. You have a repository configured
        for automated builds in a simple and convenient way.<\/p>\n\n\n\n<p>Fabrica
        currently generates builds only for the local architecture (like say AMD64),
        so if you want to create builds for other platforms, you will need to set
        up Fabrica on corresponding hardware (like say Raspberry Pi 4). But this may
        become simpler and easier in the future.<\/p>\n\n\n\n<h1>Summary<\/h1>\n\n\n\n<p>For
        people looking for a largely hands-free setup to automate their snaps builds,
        Fabrica offers a simple, convenient solution. It is not designed to replace
        the existing methods; instead, it complements the robust build and integration
        mechanisms already in place, and offers yet another practical toolbox to developers
        and enthusiastic users.<\/p>\n\n\n\n<p>Now, some options and features are
        currently unavailable, like perhaps authentication or customizable build trigger
        period, but this is where you come in! Grab Fabrica and run your own tests,
        and if you have any recommendations or suggestions, please join our forum,
        and share your thoughts.<\/p>\n\n\n\n<p>Photo by<a href=\"https:\/\/unsplash.com\/@scienceinhd?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">
        Science in HD<\/a> on<a href=\"https:\/\/unsplash.com\/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">
        Unsplash<\/a>.<br><\/p>\n","protected":false},"excerpt":{"rendered":"<p>There
        are many ways one can go about building snaps. You can do it on your local
        system, by manually running commands in a terminal window. If you have a developer
        account in the Snap Store, you can use the integrated build functionality
        to create snaps. You can also use Launchpad, Electron Builder or a [&hellip;]<\/p>\n","protected":false},"author":597,"featured_media":96237,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[],"tags":[2598,3845,3846,1941,2996,3847],"topic":[1921,1922],"group":[1706,1479,3738],"_event_location":"","_event_venue":"","_event_registration":"","_start_day":"05","_start_month":"06","_start_year":"2020","_end_day":"05","_end_month":"06","_end_year":"2020","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96235"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/597"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=96235"}],"version-history":[{"count":2,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96235\/revisions"}],"predecessor-version":[{"id":96240,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96235\/revisions\/96240"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/96237"}],"wp:attachment":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?parent=96235"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/categories?post=96235"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags?post=96235"},{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=96235"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=96235"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]},"_embedded":{"author":[{"id":597,"name":"Igor
        Ljubuncic","url":"https:\/\/login.ubuntu.com\/+id\/XppHAr6","description":"","link":"https:\/\/admin.insights.ubuntu.com\/author\/igorljubuncic\/","slug":"igorljubuncic","avatar_urls":{"24":"https:\/\/secure.gravatar.com\/avatar\/fe0589ad41ef5c32641d0dbf4e77a589?s=24&d=mm&r=g","48":"https:\/\/secure.gravatar.com\/avatar\/fe0589ad41ef5c32641d0dbf4e77a589?s=48&d=mm&r=g","96":"https:\/\/secure.gravatar.com\/avatar\/fe0589ad41ef5c32641d0dbf4e77a589?s=96&d=mm&r=g"},"user_job_title":"","user_website_title":"","user_google":"","user_twitter":"","user_facebook":"","user_photo":"","user_location":"","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/597"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users"}]}}],"wp:featuredmedia":[{"id":96237,"date":"2020-06-05T10:15:25","slug":"science-in-hd-hji1fl4vcni-unsplash-smaller","type":"attachment","link":"https:\/\/admin.insights.ubuntu.com\/2020\/06\/05\/fabrica-your-self-hosted-snap-factory\/science-in-hd-hji1fl4vcni-unsplash-smaller\/","title":{"rendered":""},"author":597,"caption":{"rendered":""},"alt_text":"Featured","media_type":"image","mime_type":"image\/jpeg","media_details":{"width":2000,"height":1425,"file":"science-in-hd-HJI1fL4VCnI-unsplash-smaller.jpg","image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":"","orientation":"0","keywords":[]},"sizes":{}},"source_url":"https:\/\/admin.insights.ubuntu.com\/wp-content\/uploads\/3aca\/science-in-hd-HJI1fL4VCnI-unsplash-smaller.jpg","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/96237"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/attachment"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/597"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=96237"}],"wp:term":[{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=96237"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=96237"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],"wp:term":[[],[{"id":2598,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/development\/","name":"Development","slug":"development","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/2598"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=2598"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=2598"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3845,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/scsnapfabrica\/","name":"sc:snap:fabrica","slug":"scsnapfabrica","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/3845"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=3845"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=3845"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3846,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/self-hosted\/","name":"self-hosted","slug":"self-hosted","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/3846"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=3846"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=3846"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":1941,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/snapcraft\/","name":"snapcraft","slug":"snapcraft","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/1941"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=1941"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=1941"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2996,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/snapcraft-io\/","name":"snapcraft.io","slug":"snapcraft-io","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/2996"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=2996"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=2996"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3847,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/web-service\/","name":"Web
        service","slug":"web-service","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/3847"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=3847"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=3847"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":1921,"link":"https:\/\/admin.insights.ubuntu.com\/topic\/desktop\/","name":"Desktop","slug":"desktop","taxonomy":"topic","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic\/1921"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/topic"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?topic=1921"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?topic=1921"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?topic=1921"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":1922,"link":"https:\/\/admin.insights.ubuntu.com\/topic\/server\/","name":"Server","slug":"server","taxonomy":"topic","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic\/1922"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/topic"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?topic=1922"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?topic=1922"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?topic=1922"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":1706,"link":"https:\/\/admin.insights.ubuntu.com\/group\/cloud-and-server\/","name":"Cloud
        and server","slug":"cloud-and-server","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/1706"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=1706"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=1706"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=1706"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":1479,"link":"https:\/\/admin.insights.ubuntu.com\/group\/desktop\/","name":"Desktop","slug":"desktop","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/1479"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=1479"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=1479"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=1479"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3738,"link":"https:\/\/admin.insights.ubuntu.com\/group\/server\/","name":"Server","slug":"server","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/3738"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=3738"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=3738"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=3738"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]]}},{"id":96077,"date":"2020-05-29T11:51:18","date_gmt":"2020-05-29T11:51:18","guid":{"rendered":"https:\/\/admin.insights.ubuntu.com\/?p=96077"},"modified":"2020-05-29T11:51:20","modified_gmt":"2020-05-29T11:51:20","slug":"snapcraft-development-tips-how-to-troubleshoot-snaps-with-services","status":"publish","type":"post","link":"https:\/\/admin.insights.ubuntu.com\/2020\/05\/29\/snapcraft-development-tips-how-to-troubleshoot-snaps-with-services\/","title":{"rendered":"Snapcraft
        development tips: how to troubleshoot snaps with services"},"content":{"rendered":"\n<p>In
        the past, we have discussed various ways on how to debug and <a href=\"https:\/\/snapcraft.io\/blog\/make-your-snap-development-faster\">troubleshoot<\/a>
        potential issues during snap development. The ability to quickly iterate,
        resolve build process hurdles and publish the application in a timely manner
        is essential to a robust, positive development experience. Today, we would
        like to outline a few basic tips and tricks focused around snaps that contain
        services.<\/p>\n\n\n\n<h1>Inspect service status &amp; manually run services<\/h1>\n\n\n\n<p>With
        snaps that contain services, your most likely point of friction will be after
        the build process. To that end, you should install the built snap locally
        and then check that it runs correctly, and that the services start successfully.<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">snap install \u201csnapname\u201d --dangerous<\/pre>\n\n\n\n<p>The
        <em>&#8211;dangerous<\/em> flag is required because your locally built snap
        does not originate from the Snap Store, and it has not been cryptographically
        signed.<\/p>\n\n\n\n<p>Once the snap is installed, you can check whether the
        services contained therein run. Let\u2019s demonstrate with Nextcloud, which
        is a fairly complex snap that contains multiple applications, including various
        services:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap services nextcloud<br><br>Service\u00a0
        \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 Startup\u00a0
        Current\u00a0 Notes<br>nextcloud.apache \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0
        enabled\u00a0 active \u00a0 -<br>nextcloud.mdns-publisher \u00a0 enabled\u00a0
        active \u00a0 -<br>nextcloud.mysql\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0
        enabled\u00a0 active \u00a0 -<br>nextcloud.nextcloud-cron \u00a0 enabled\u00a0
        active \u00a0 -<br>nextcloud.nextcloud-fixer\u00a0 enabled\u00a0 active \u00a0
        -<br>nextcloud.php-fpm\u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 enabled\u00a0
        active \u00a0 -<br>nextcloud.redis-server \u00a0\u00a0\u00a0 enabled\u00a0
        active \u00a0 -<br>nextcloud.renew-certs\u00a0 \u00a0\u00a0\u00a0 enabled\u00a0
        active \u00a0 -<\/pre>\n\n\n\n<p>In this case, we can see that the services
        are enabled and active. However, in case of a failure, you would most likely
        see something like the Current column reads \u201cinactive\u201d.<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">Service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0
        \u00a0 \u00a0 \u00a0\u00a0    Startup\u00a0 Current\u00a0 Notes<br>starwars.tng\u00a0
        \u00a0 \u00a0 \u00a0\u00a0\u00a0      enabled\u00a0 inactive \u00a0 -<\/pre>\n\n\n\n<p>At
        this point, you can attempt starting the failed service manually, to see whether
        there are any useful messages (standard output and standard error) printed
        in your terminal.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">sudo snap
        start \u201csnap name\u201d<br>sudo snap snart \u201csnap name.\u201dservice
        name\u201d<\/pre>\n\n\n\n<p>Alternatively, you can \u201crun\u201d the service,
        like you would any application &#8211; with all the expected parameters that
        the service requires to see its behavior. You should also see messages and
        errors printed inside your terminal windows. For instance:<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">sudo snap run nextcloud.mdns-publisher<br>2020\/05\/27
        12:20:45 Publishing virt.local -&gt; [10.0.2.15 fe80::c75f:601a:88b1:3dab]
        with 60-second TTL<\/pre>\n\n\n\n<h1>Inspect logs<\/h1>\n\n\n\n<p>The first
        step in trying to understand the potential service startup failure is to examine
        the logs. In general, this is always a useful course of action &#8211; including
        applications that start successfully. While it is possible that the services
        run, they may be misconfigured or may require tweaking. The command syntax
        is as follows:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap logs
        \u201cservice snap name\u201d<\/pre>\n\n\n\n<p>Again, let\u2019s examine the
        Nextcloud example.&nbsp;<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap
        logs nextcloud<br>2020-05-26T12:11:46Z nextcloud.apache[3229]: done<br>2020-05-26T12:11:46Z
        nextcloud.apache[3229]: Configuring nextcloud\u2026<br>2020-05-26T12:11:47Z
        nextcloud.apache[3136]: All set! Running httpd\u2026<br>2020-05-26T12:11:47Z
        nextcloud.apache[4196]: No certificates are active: using HTTP only<br>2020-05-26T12:11:47Z
        nextcloud.nextcloud-cron[3094]: Waiting for Nextcloud config dir... done<br>2020-05-26T12:11:47Z
        nextcloud.apache[4229]: AH00558: httpd: Could not reliably determine the server''s
        fully qualified domain name, using 127.0.1.1. Set the ''ServerName'' directive
        globally to suppress this message<br>2020-05-26T12:11:48Z nextcloud.nextcloud-fixer[3022]:
        done<br>2020-05-26T12:11:48Z nextcloud.nextcloud-fixer[3022]: Waiting for
        Nextcloud to be installed...<\/pre>\n\n\n\n<p>Here, from the end of the log,
        we can see that the nextcloud.apache service is running, however it could
        not determine the server\u2019s FQDN. In some scenarios, this is perfectly
        normal, and you can ignore the message. In others, this would be a useful
        piece of information that would require changing the server configuration.<\/p>\n\n\n\n<p>You
        can fine tune the level of verbosity and information displayed. For a snap
        with multiple services, you may only be interested in a specific service:<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">snap logs \u201csnap name.service name\u201d<\/pre>\n\n\n\n<p>Below,
        we are only looking for log information on the Nextcloud MySQL service. The
        optional <em>-n<\/em> flag determines how many lines of log data from the
        end of the file should be displayed. You may also use the <em>-f<\/em> flag
        to see to follow the log, so that any new messages will be appended and printed
        to the standard output.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap
        logs -n=all nextcloud.mysql<br>2020-05-26T12:11:41Z nextcloud.mysql[3767]:
        mysql.time_zone_transition_type\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0
        \u00a0 \u00a0\u00a0\u00a0            OK<br>2020-05-26T12:11:41Z nextcloud.mysql[3767]:
        mysql.user \u00a0 \u00a0 \u00a0 \u00a0OK<br>2020-05-26T12:11:41Z nextcloud.mysql[3767]:
        The sys schema is already up to date (version 1.5.2).<br>2020-05-26T12:11:41Z
        nextcloud.mysql[3767]: Checking databases.<br>2020-05-26T12:11:41Z nextcloud.mysql[3767]:
        sys.sys_config \u00a0 \u00a0OK<br>2020-05-26T12:11:41Z nextcloud.mysql[3767]:
        Upgrade process completed successfully.<br>2020-05-26T12:11:41Z nextcloud.mysql[3767]:
        Checking if update is needed.<br>2020-05-26T12:11:41Z nextcloud.mysql[3050]:
        Restarting mysql server after upgrade\u2026<br>2020-05-26T12:11:41Z nextcloud.mysql[3828]:
        Shutting down MySQL<br>2020-05-26T12:11:43Z nextcloud.mysql[3828]: .. *<br>2020-05-26T12:11:43Z
        nextcloud.mysql[3864]: Starting MySQL<br>2020-05-26T12:11:44Z nextcloud.mysql[3864]:
        . *<\/pre>\n\n\n\n<p>Optionally, you can also use the system <em>journalctl<\/em>
        command to see the snap logs:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">journalctl
        -ef -u snap.\u201dsnap name\u201d.\u201dservice name\u201d<\/pre>\n\n\n\n<p>This
        command will show the log for the unit file that corresponds to the written
        name (-u), will show the end of the log (-e), and will follow it (-f), so
        you will see any new messages also being printed to the standard output, which
        can be quite useful when troubleshooting services in real time.<\/p>\n\n\n\n<p>The
        logs are quite useful in that you may not necessarily see an exact reason
        for a service startup failure on the command line, even if you manually run
        the <em>snap start<\/em> command. A service may be configured incorrectly,
        the messages could be saved to a separate log file.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap
        services igor<br>Service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0
        Startup\u00a0 Current \u00a0 Notes<br>igor.main \u00a0 \u00a0 \u00a0 \u00a0
        \u00a0\u00a0\u00a0    enabled\u00a0 inactive\u00a0 -<br>igor.secondary\u00a0          enabled\u00a0
        inactive\u00a0 -<\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">sudo snap
        start igor.secondary<br>Started.<\/pre>\n\n\n\n<p>However, while the message
        reads <em>Started<\/em>, the service is still in the inactive state. We now
        inspect the logs, or manually run the igor.secondary service to get additional
        information, and hopefully, be able to resolve the problem.<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">2020-05-28T12:12:56Z igor.secondary[18440]:
        + tee -a \/root\/snap\/igor\/x3\/logs\/secondary.log<br>2020-05-28T12:12:56Z
        igor.secondary[18440]: + \/snap\/igor\/x3\/usr\/share\/secondary\/startup.sh
        --host=localhost --domain=locutus --port=7747 --apis=rest,xmpp<br>2020-05-28T12:12:56Z
        igor.secondary[18440]: Error: Could not find or load main class SECONDARY_LOGFILE:<br>2020-05-28T12:12:56Z
        igor.secondary[18440]: Caused by: java.lang.ClassNotFoundException: SECONDARY_LOGFILE:<br>2020-05-28T12:12:56Z
        systemd[1]: snap.igor.secondary.service: Succeeded.<\/pre>\n\n\n\n<h2>Debug
        failed run<\/h2>\n\n\n\n<p>As we\u2019ve outlined in the past snap troubleshooting
        tutorials, you can step into the snap environment by using the <em>&#8211;shell<\/em>
        flag. This allows you to inspect the snap structure, as well as verify the
        value of any environment variables.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap
        run --shell \u201csnap name\u201d<br>snap run --shell \u201csnap name\u201d.\u201dservice
        name\u201d<\/pre>\n\n\n\n<p>You can now try to manually check and configure
        the application environment, and then run any command in the service chain
        to see where the failure occurs, and if there are any misconfigurations that
        need to be addressed.<\/p>\n\n\n\n<h1>Install hook<\/h1>\n\n\n\n<p>Some snaps
        may include services that cannot run immediately after the installation, as
        they require a manual post-install configuration, and therefore will fail
        to start correctly. You can change the default behavior by using an <em>install<\/em>
        hook.<\/p>\n\n\n\n<p><a href=\"https:\/\/snapcraft.io\/docs\/supported-snap-hooks\">Hooks<\/a>
        are executable files that run within a snap\u2019s confined environment when
        a certain action occurs. If you require specific commands to be triggered
        in different phases of a snap lifecycle, you can create hooks inside the snap\u2019s
        hooks folder &#8211; \u201cproject workspace\u201d\/snap\/hooks, and they
        will then be parsed and run by the snapd service at the required phase in
        the lifecycle. For instance, the <em>install<\/em> hook will run only once
        on first installation, the <em>configure<\/em> hook will run on installation
        and any subsequent refresh, and so on.<\/p>\n\n\n\n<p>Hooks also obey snap
        confinement rules, so if they require access to resources outside the snap,
        you will need to provide granular overrides using interfaces, like access
        to the network, the ability to bind ports, or access remote storage.<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">hooks:<br>&nbsp; configure:<br>&nbsp;&nbsp;&nbsp;
        plugs: [network, network-bind, removable-media]<br>&nbsp; pre-refresh:<br>&nbsp;&nbsp;&nbsp;
        plugs: [network, network-bind, removable-media]<\/pre>\n\n\n\n<p>If your service
        depends on a specific configuration that is not available when the snap is
        installed, you can prevent the startup, and then manually change the service
        state. This can be done by using <em>&#8211;enable<\/em> and <em>&#8211;disable<\/em>
        flags when starting or stopping a service, respectively.<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">snap start --enable \u201csnap name\u201d.\u201dservice
        name\u201d<br>snap stop --disable \u201csnap name\u201d.\u201dservice name\u201d<\/pre>\n\n\n\n<p>For
        instance:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">snap stop --disable
        nextcloud.mdns-publisher<\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\">snap
        services nextcloud<br>Service\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0
        \u00a0 \u00a0\u00a0\u00a0 Startup \u00a0 Current \u00a0 Notes<br>nextcloud.apache
        \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 enabled \u00a0 active\u00a0\u00a0\u00a0
        -<br>nextcloud.mdns-publisher \u00a0 disabled\u00a0 inactive\u00a0 -<br>nextcloud.mysql\u00a0
        \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 enabled \u00a0 active\u00a0\u00a0\u00a0
        -<br>nextcloud.nextcloud-cron \u00a0 enabled \u00a0 active\u00a0\u00a0\u00a0
        -<br>nextcloud.nextcloud-fixer\u00a0 enabled \u00a0 active\u00a0\u00a0\u00a0
        -<br>nextcloud.php-fpm\u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 enabled \u00a0
        active\u00a0\u00a0\u00a0 -<br>nextcloud.redis-server \u00a0\u00a0\u00a0 enabled
        \u00a0 active\u00a0\u00a0\u00a0 -<br>nextcloud.renew-certs\u00a0 \u00a0\u00a0\u00a0
        enabled \u00a0 active\u00a0\u00a0\u00a0 -<\/pre>\n\n\n\n<h1>Check ports<\/h1>\n\n\n\n<p>Additionally,
        you can also use the system commands like netstat or ss to check which processes
        are running, and if they are listening to any ports. This can help you spot
        any possible misconfigurations, even if the services are seemingly active.
        For instance, a different process may bind a port that is necessary for the
        functionality of one of the services in your snap. Or if you are using the
        <a href=\"https:\/\/snapcraft.io\/blog\/parallel-installs-test-and-run-multiple-instances-of-snaps\">parallel
        installs<\/a> feature, you may need to make adjustments to your project to
        allow multiple instances of your services to run without conflicts.<\/p>\n\n\n\n<pre
        class=\"wp-block-preformatted\">ss -tulpan<br>Netid&nbsp;&nbsp;&nbsp; State
        &nbsp;&nbsp;&nbsp; Recv-Q&nbsp;&nbsp;&nbsp; Send-Q&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        Local Address:Port &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; Peer Address:Port&nbsp;&nbsp;&nbsp;
        Process&nbsp; &nbsp; <br>udp&nbsp; &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp;
        0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        127.0.0.53%lo:53&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0.0.0.0:* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>udp&nbsp;
        &nbsp;&nbsp;&nbsp; ESTAB &nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 10.0.2.15%enp0s3:68 &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 10.0.2.2:67 &nbsp; &nbsp; &nbsp;
        &nbsp; &nbsp; <br>udp&nbsp; &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp; 0
        &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:41523 &nbsp; &nbsp; &nbsp; &nbsp;
        &nbsp;&nbsp;&nbsp; 0.0.0.0:* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>udp&nbsp;
        &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0.0.0.0:631 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:*
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>udp&nbsp;
        &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0.0.0.0:5353&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:*
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>udp&nbsp;
        &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0.0.0.0:5353&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:*
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>udp&nbsp;
        &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        [::]:48228&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; [::]:*
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>udp&nbsp;
        &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        [::]:5353 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; [::]:*
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>udp&nbsp;
        &nbsp;&nbsp;&nbsp; UNCONN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        [::]:5353 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; [::]:*
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>tcp&nbsp;
        &nbsp;&nbsp;&nbsp; LISTEN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        4096&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 127.0.0.53%lo:53&nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:* &nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>tcp&nbsp; &nbsp;&nbsp;&nbsp;
        LISTEN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 128 &nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:22&nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:* &nbsp; &nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>tcp&nbsp; &nbsp;&nbsp;&nbsp;
        LISTEN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 5 &nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 127.0.0.1:631 &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 0.0.0.0:* &nbsp; &nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>tcp&nbsp; &nbsp;&nbsp;&nbsp;
        LISTEN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; 511 &nbsp; &nbsp;
        &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        *:80&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        *:* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>tcp&nbsp;
        &nbsp;&nbsp;&nbsp; LISTEN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        128&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        [::]:22 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        [::]:* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;  <br>tcp&nbsp;
        &nbsp;&nbsp;&nbsp; LISTEN&nbsp;&nbsp;&nbsp; 0 &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        5 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        [::1]:631&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;
        [::]:*&nbsp;<\/pre>\n\n\n\n<h1>Summary<\/h1>\n\n\n\n<p>At first glance, bundling
        applications with services as snaps may seem like a difficult task. While
        the concept of confinement does present a paradigm shift in development, the
        handling of the network stack remains unchanged. Snaps share the process namespace
        with the underlying system, and the core ideas of network port binding and
        associated functionality are identical to the classic Linux development.<\/p>\n\n\n\n<p>In
        this article, we outlined a number of tools you can use to inspect your services,
        verify that they are working correctly &#8211; and if they are not, dig into
        the log messages and try to understand what type of issues may exist. If you
        have any questions or comments on this topic, please join <a href=\"https:\/\/forum.snapcraft.io\/\">our
        forum<\/a> for a discussion.<\/p>\n\n\n\n<p>Photo by <a href=\"https:\/\/unsplash.com\/@churchoftodd?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">todd
        kent<\/a> on <a href=\"https:\/\/unsplash.com\/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In
        the past, we have discussed various ways on how to debug and troubleshoot
        potential issues during snap development. The ability to quickly iterate,
        resolve build process hurdles and publish the application in a timely manner
        is essential to a robust, positive development experience. Today, we would
        like to outline a few basic tips and [&hellip;]<\/p>\n","protected":false},"author":597,"featured_media":96079,"comment_status":"open","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[],"tags":[2598,3837,2160,1941,2996,3469],"topic":[1921,1922],"group":[1706,1479,3738],"_event_location":"","_event_venue":"","_event_registration":"","_start_day":"29","_start_month":"05","_start_year":"2020","_end_day":"29","_end_month":"05","_end_year":"2020","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96077"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/597"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=96077"}],"version-history":[{"count":1,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96077\/revisions"}],"predecessor-version":[{"id":96078,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts\/96077\/revisions\/96078"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/96079"}],"wp:attachment":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?parent=96077"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/categories?post=96077"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags?post=96077"},{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=96077"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=96077"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]},"_embedded":{"author":[{"id":597,"name":"Igor
        Ljubuncic","url":"https:\/\/login.ubuntu.com\/+id\/XppHAr6","description":"","link":"https:\/\/admin.insights.ubuntu.com\/author\/igorljubuncic\/","slug":"igorljubuncic","avatar_urls":{"24":"https:\/\/secure.gravatar.com\/avatar\/fe0589ad41ef5c32641d0dbf4e77a589?s=24&d=mm&r=g","48":"https:\/\/secure.gravatar.com\/avatar\/fe0589ad41ef5c32641d0dbf4e77a589?s=48&d=mm&r=g","96":"https:\/\/secure.gravatar.com\/avatar\/fe0589ad41ef5c32641d0dbf4e77a589?s=96&d=mm&r=g"},"user_job_title":"","user_website_title":"","user_google":"","user_twitter":"","user_facebook":"","user_photo":"","user_location":"","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/597"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users"}]}}],"wp:featuredmedia":[{"id":96079,"date":"2020-05-29T11:49:55","slug":"todd-kent-onnjoff-oku-unsplash-smaller","type":"attachment","link":"https:\/\/admin.insights.ubuntu.com\/2020\/05\/29\/snapcraft-development-tips-how-to-troubleshoot-snaps-with-services\/todd-kent-onnjoff-oku-unsplash-smaller\/","title":{"rendered":""},"author":597,"caption":{"rendered":""},"alt_text":"Featured","media_type":"image","mime_type":"image\/jpeg","media_details":{"width":2000,"height":1333,"file":"todd-kent-onnJOfF-okU-unsplash-smaller.jpg","image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":"","orientation":"0","keywords":[]},"sizes":{}},"source_url":"https:\/\/admin.insights.ubuntu.com\/wp-content\/uploads\/58f8\/todd-kent-onnJOfF-okU-unsplash-smaller.jpg","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media\/96079"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/types\/attachment"}],"author":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/users\/597"}],"replies":[{"embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/comments?post=96079"}],"wp:term":[{"taxonomy":"topic","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic?post=96079"},{"taxonomy":"group","embeddable":true,"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group?post=96079"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],"wp:term":[[],[{"id":2598,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/development\/","name":"Development","slug":"development","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/2598"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=2598"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=2598"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3837,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/services\/","name":"services","slug":"services","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/3837"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=3837"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=3837"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2160,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/snap-development\/","name":"snap
        development","slug":"snap-development","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/2160"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=2160"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=2160"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":1941,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/snapcraft\/","name":"snapcraft","slug":"snapcraft","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/1941"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=1941"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=1941"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":2996,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/snapcraft-io\/","name":"snapcraft.io","slug":"snapcraft-io","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/2996"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=2996"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=2996"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3469,"link":"https:\/\/admin.insights.ubuntu.com\/tag\/troubleshooting\/","name":"troubleshooting","slug":"troubleshooting","taxonomy":"post_tag","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags\/3469"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/tags"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/post_tag"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?tags=3469"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?tags=3469"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":1921,"link":"https:\/\/admin.insights.ubuntu.com\/topic\/desktop\/","name":"Desktop","slug":"desktop","taxonomy":"topic","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic\/1921"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/topic"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?topic=1921"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?topic=1921"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?topic=1921"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":1922,"link":"https:\/\/admin.insights.ubuntu.com\/topic\/server\/","name":"Server","slug":"server","taxonomy":"topic","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic\/1922"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/topic"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/topic"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?topic=1922"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?topic=1922"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?topic=1922"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}],[{"id":1706,"link":"https:\/\/admin.insights.ubuntu.com\/group\/cloud-and-server\/","name":"Cloud
        and server","slug":"cloud-and-server","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/1706"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=1706"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=1706"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=1706"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":1479,"link":"https:\/\/admin.insights.ubuntu.com\/group\/desktop\/","name":"Desktop","slug":"desktop","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/1479"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=1479"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=1479"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=1479"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}},{"id":3738,"link":"https:\/\/admin.insights.ubuntu.com\/group\/server\/","name":"Server","slug":"server","taxonomy":"group","_links":{"self":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group\/3738"}],"collection":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/group"}],"about":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/taxonomies\/group"}],"wp:post_type":[{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/posts?group=3738"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/media?group=3738"},{"href":"https:\/\/admin.insights.ubuntu.com\/wp-json\/wp\/v2\/event?group=3738"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}]]}}]'}
    headers:
      Access-Control-Allow-Headers: ['Authorization, Content-Type']
      Access-Control-Expose-Headers: ['X-WP-Total, X-WP-TotalPages']
      Allow: [GET]
      Connection: [Keep-Alive]
      Content-Type: [application/json; charset=UTF-8]
      Date: ['Tue, 09 Jun 2020 13:52:23 GMT']
      Keep-Alive: ['timeout=5, max=99']
      Link: ['<https://admin.insights.ubuntu.com/wp-json/wp/v2/posts?tags%5B0%5D=1239&tags%5B1%5D=2598&tags%5B2%5D=2929&per_page=3&page=2&exclude%5B0%5D=93920&_embed=true>;
          rel="next"']
      Server: [Apache/2.4.7 (Ubuntu)]
      Transfer-Encoding: [chunked]
      Vary: ['Origin,Cookie']
      Via: [1.1 juju-prod45-is-insights-blog-machine-16 (squid/3.3.8)]
      X-Cache: [MISS from juju-prod45-is-insights-blog-machine-16]
      X-Cache-Lookup: ['HIT from juju-prod45-is-insights-blog-machine-16:8080']
      X-Content-Type-Options: [nosniff]
      X-Powered-By: [PHP/5.5.9-1ubuntu4.29]
      X-Robots-Tag: [noindex]
      X-WP-Total: ['557']
      X-WP-TotalPages: ['186']
    status: {code: 200, message: OK}
version: 1
