[1mdiff --cc tests/test_common_view_logic.py[m
[1mindex 7bb735d,d4808fc..0000000[m
[1m--- a/tests/test_common_view_logic.py[m
[1m+++ b/tests/test_common_view_logic.py[m
[36m@@@ -8,382 -16,167 +16,297 @@@[m [mapi.api_session = CachedSession(fallbac[m
  [m
  [m
  class TestCommonViewLogic(unittest.TestCase):[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_group_by_id")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_category_by_id")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_user")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_media")[m
[31m-     def test_building_index_context([m
[31m-         self, get_media, get_user, get_category_by_id, get_group_by_id[m
[31m-     ):[m
[31m-         get_media.return_value = "test_image"[m
[31m-         get_user.return_value = "test_author"[m
[31m-         get_category_by_id.return_value = "test_category"[m
[31m-         get_group_by_id.return_value = "test_group"[m
[31m-         articles = [[m
[31m-             {[m
[31m-                 "featured_media": "test",[m
[31m-                 "author": "test",[m
[31m-                 "categories": [1, 2],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test"],[m
[31m-             },[m
[31m-             {[m
[31m-                 "featured_media": "test2",[m
[31m-                 "author": "test2",[m
[31m-                 "categories": [2, 3],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test2"],[m
[31m-             },[m
[31m-         ][m
[31m-         context = get_index_context(1, articles, 2)[m
[31m-         expected_context = {[m
[31m-             "current_page": 1,[m
[31m-             "total_pages": 2,[m
[31m-             "featured_articles": [],[m
[31m-             "articles": [[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [1, 2],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test"],[m
[31m-                 },[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [2, 3],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test2",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test2"],[m
[31m-                 },[m
[31m-             ],[m
[31m-             "groups": {1: "test_group"},[m
[31m-             "upcoming": [],[m
[31m-             "used_categories": {[m
[31m-                 1: "test_category",[m
[31m-                 2: "test_category",[m
[31m-                 3: "test_category",[m
[31m-             },[m
[31m-         }[m
[31m-         self.maxDiff = None[m
[31m-         self.assertEqual(context, expected_context)[m
[32m+     @vcr.use_cassette("fixtures/vcr_cassettes/get_complete_article.yaml")[m
[32m+     def test_get_complete_article(self):[m
[32m+         article = api.get_article([m
[32m+             "canonical-announces-support-for"[m
[32m+             "-ubuntu-on-windows-subsystem-for-linux-2"[m
[32m+         )[m
[32m+         article["categories"] = [1453][m
  [m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_group_by_id")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_category_by_id")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_user")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_media")[m
[31m-     def test_building_index_context_with_featured_articles([m
[31m-         self, get_media, get_user, get_category_by_id, get_group_by_id[m
[31m-     ):[m
[31m-         get_media.return_value = "test_image"[m
[31m-         get_user.return_value = "test_author"[m
[31m-         get_category_by_id.return_value = "test_category"[m
[31m-         get_group_by_id.return_value = "test_group"[m
[31m-         articles = [[m
[31m-             {[m
[31m-                 "featured_media": "test",[m
[31m-                 "author": "test",[m
[31m-                 "categories": [1, 2],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test"],[m
[31m-             },[m
[31m-             {[m
[31m-                 "featured_media": "test2",[m
[31m-                 "author": "test2",[m
[31m-                 "categories": [2, 3],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test2"],[m
[31m-             },[m
[32m+         complete_article = get_complete_article(article)[m
[32m+         self.assertEqual(complete_article["author"]["name"], "Canonical")[m
[32m+         self.assertEqual([m
[32m+             complete_article["image"]["id"], article["featured_media"][m
[32m+         )[m
[32m+         self.assertEqual(complete_article["date"], "6 May 2019")[m
[32m+         # Test for length of 339, and if > than 340, [...] is added[m
[32m+         self.assertLessEqual(len(complete_article["excerpt"]["raw"]), 344)[m
[32m+         self.assertEqual([m
[32m+             complete_article["display_category"]["name"], "Articles"[m
[32m+         )[m
[32m+         self.assertEqual([m
[32m+             complete_article["group"]["name"], "Canonical announcements"[m
[32m+         )[m
[32m+ [m
[32m+     @vcr.use_cassette("fixtures/vcr_cassettes/get_index_context.yaml")[m
[32m+     def test_get_index_context(self):[m
[32m+         articles, total_pages = api.get_articles()[m
[32m+         all_categories = [[m
[32m+             category[m
[32m+             for article in articles[m
[32m+             for category in article["categories"][m
          ][m
[31m-         featured_articles = [[m
[31m-             {[m
[31m-                 "featured_media": "test",[m
[31m-                 "author": "test",[m
[31m-                 "categories": [1, 2],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test"],[m
[31m-             },[m
[31m-             {[m
[31m-                 "featured_media": "test2",[m
[31m-                 "author": "test2",[m
[31m-                 "categories": [2, 3],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test2"],[m
[31m-             },[m
[32m+         all_groups = [[m
[32m+             group for article in articles for group in article["group"][m
          ][m
[31m-         context = get_index_context(1, articles, 2, featured_articles)[m
[31m-         expected_context = {[m
[31m-             "current_page": 1,[m
[31m-             "total_pages": 2,[m
[31m-             "featured_articles": [[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [1, 2],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test"],[m
[31m-                 },[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [2, 3],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test2",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test2"],[m
[31m-                 },[m
[31m-             ],[m
[31m-             "articles": [[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [1, 2],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test"],[m
[31m-                 },[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [2, 3],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test2",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test2"],[m
[31m-                 },[m
[31m-             ],[m
[31m-             "groups": {1: "test_group"},[m
[31m-             "upcoming": [],[m
[31m-             "used_categories": {[m
[31m-                 1: "test_category",[m
[31m-                 2: "test_category",[m
[31m-                 3: "test_category",[m
[31m-             },[m
[31m-         }[m
[31m-         self.maxDiff = None[m
[31m-         self.assertEqual(context, expected_context)[m
  [m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_group_by_id")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_category_by_id")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_user")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_media")[m
[31m-     def test_building_index_context_with_params_as_strings([m
[31m-         self, get_media, get_user, get_category_by_id, get_group_by_id[m
[31m-     ):[m
[31m-         get_media.return_value = "test_image"[m
[31m-         get_user.return_value = "test_author"[m
[31m-         get_category_by_id.return_value = "test_category"[m
[31m-         get_group_by_id.return_value = "test_group"[m
[31m-         articles = [[m
[31m-             {[m
[31m-                 "featured_media": "test",[m
[31m-                 "author": "test",[m
[31m-                 "categories": [1, 2],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test"],[m
[31m-             },[m
[31m-             {[m
[31m-                 "featured_media": "test2",[m
[31m-                 "author": "test2",[m
[31m-                 "categories": [2, 3],[m
[31m-                 "group": [1],[m
[31m-                 "tags": ["test2"],[m
[31m-             },[m
[32m+         featured, _ = api.get_articles(sticky=True)[m
[32m+ [m
[32m+         # TODO: TDD refactor of function signature, to get[m
[32m+         # the whole index without any params[m
[32m+         index_context = get_index_context(1, articles, "2", featured)[m
[32m+ [m
[32m+         # page information is correct[m
[32m+         self.assertEqual(index_context["current_page"], 1)[m
[32m+         self.assertEqual(index_context["total_pages"], 2)[m
[32m+ [m
[32m+         # all articles were transformed[m
[32m+         for article in index_context["articles"]:[m
[32m+             self.assertIsNotNone(article["author"]["name"])[m
[32m+             self.assertIsNotNone(article["image"])[m
[32m+             self.assertIsNotNone(article["group"])[m
[32m+ [m
[32m+         for article in index_context["featured_articles"]:[m
[32m+             self.assertIsNotNone(article["author"]["name"])[m
[32m+             self.assertIsNotNone(article["image"])[m
[32m+             self.assertIsNotNone(article["group"])[m
[32m+ [m
[32m+         # all categories that the articles had were resolved[m
[32m+         used_categories = list(index_context["used_categories"].keys())[m
[32m+         for category in all_categories:[m
[32m+             self.assertTrue(category in used_categories)[m
[32m+ [m
[32m+         # all groups that the articles had were resolved[m
[32m+         used_groups = list(index_context["groups"].keys())[m
[32m+         for group in all_groups:[m
[32m+             self.assertTrue(group in used_groups)[m
[32m+ [m
[32m+     @vcr.use_cassette("fixtures/vcr_cassettes/get_group_context.yaml")[m
[32m+     def test_get_group_page_context(self):[m
[32m+         articles, total_pages = api.get_articles()[m
[32m+         all_categories = [[m
[32m+             category[m
[32m+             for article in articles[m
[32m+             for category in article["categories"][m
          ][m
[31m-         context = get_index_context("1", articles, "2")[m
[31m-         expected_context = {[m
[31m-             "current_page": 1,[m
[31m-             "total_pages": 2,[m
[31m-             "featured_articles": [],[m
[31m-             "articles": [[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [1, 2],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test"],[m
[31m-                 },[m
[31m-                 {[m
[31m-                     "author": "test_author",[m
[31m-                     "categories": [2, 3],[m
[31m-                     "display_category": "test_category",[m
[31m-                     "featured_media": "test2",[m
[31m-                     "group": "test_group",[m
[31m-                     "image": "test_image",[m
[31m-                     "tags": ["test2"],[m
[31m-                 },[m
[31m-             ],[m
[31m-             "groups": {1: "test_group"},[m
[31m-             "upcoming": [],[m
[31m-             "used_categories": {[m
[31m-                 1: "test_category",[m
[31m-                 2: "test_category",[m
[31m-                 3: "test_category",[m
[31m-             },[m
[31m-         }[m
[31m-         self.maxDiff = None[m
[31m-         self.assertEqual(context, expected_context)[m
  [m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_tags_by_ids")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_articles")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_user")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_media")[m
[31m-     @patch("canonicalwebteam.blog.wordpress_api.get_group_by_id")[m
[31m-     def test_building_article_context([m
[31m-         self,[m
[31m-         get_group_by_id,[m
[31m-         get_media,[m
[31m-         get_user,[m
[31m-         get_articles,[m
[31m-         get_tags_by_id,[m
[31m-     ):[m
[31m-         get_media.return_value = "test_image"[m
[31m-         get_group_by_id.return_value = "test_group"[m
[31m-         get_articles.return_value = ([m
[31m-             [[m
[31m-                 {[m
[31m-                     "id": 2,[m
[31m-                     "featured_media": "test_related_article_image",[m
[31m-                     "author": "test_related_article_author",[m
[31m-                     "categories": [4, 5],[m
[31m-                     "group": [4],[m
[31m-                     "tags": ["test_related_article"],[m
[31m-                 }[m
[31m-             ],[m
[31m-             2,[m
[32m+         featured, _ = api.get_articles(sticky=True)[m
[32m+ [m
[32m+         # TODO: TDD refactor of function signature, to get[m
[32m+         # the groups based on a group id[m
[32m+         group_context = get_group_page_context([m
[32m+             1, articles, "2", "test", featured[m
          )[m
[32m++<<<<<<< HEAD[m
[32m +        get_user.return_value = "test_author"[m
[32m +        get_tags_by_id.return_value = [[m
[32m +            {"id": 1, "name": "test_tag_1", "slug": "test_tag_1"},[m
[32m +            {"id": 2, "name": "test_tag_2", "slug": "test_tag_2"},[m
[32m +        ][m
[32m +        article = {[m
[32m +            "id": 1,[m
[32m +            "featured_media": "test",[m
[32m +            "author": "test",[m
[32m +            "categories": [1, 2],[m
[32m +            "group": [1],[m
[32m +            "tags": ["test"],[m
[32m +        }[m
[32m +[m
[32m +        context = get_article_context(article)[m
[32m +        expected_context = {[m
[32m +            "article": {[m
[32m +                "id": 1,[m
[32m +                "author": "test_author",[m
[32m +                "categories": [1, 2],[m
[32m +                "featured_media": "test",[m
[32m +                "group": "test_group",[m
[32m +                "image": None,[m
[32m +                "tags": ["test"],[m
[32m +            },[m
[32m +            "is_in_series": False,[m
[32m +            "related_articles": [[m
[32m +                {[m
[32m +                    "id": 2,[m
[32m +                    "featured_media": "test_related_article_image",[m
[32m +                    "author": None,[m
[32m +                    "categories": [4, 5],[m
[32m +                    "group": [4],[m
[32m +                    "image": None,[m
[32m +                    "tags": ["test_related_article"],[m
[32m +                }[m
[32m +            ],[m
[32m +            "tags": [[m
[32m +                {"id": 1, "name": "test_tag_1", "slug": "test_tag_1"},[m
[32m +                {"id": 2, "name": "test_tag_2", "slug": "test_tag_2"},[m
[32m +            ],[m
[32m +        }[m
[32m +[m
[32m +        self.maxDiff = None[m
[32m +        self.assertEqual(context, expected_context)[m
[32m +[m
[32m +    @patch("canonicalwebteam.blog.wordpress_api.get_tags_by_ids")[m
[32m +    @patch("canonicalwebteam.blog.wordpress_api.get_articles")[m
[32m +    @patch("canonicalwebteam.blog.wordpress_api.get_user")[m
[32m +    @patch("canonicalwebteam.blog.wordpress_api.get_media")[m
[32m +    @patch("canonicalwebteam.blog.wordpress_api.get_group_by_id")[m
[32m +    def test_building_article_context_with_only_certain_related_posts([m
[32m +        self,[m
[32m +        get_group_by_id,[m
[32m +        get_media,[m
[32m +        get_user,[m
[32m +        get_articles,[m
[32m +        get_tags_by_id,[m
[32m +    ):[m
[32m +        get_media.return_value = "test_image"[m
[32m +        get_group_by_id.return_value = "test_group"[m
[32m +        get_articles.return_value = ([m
[32m +            [[m
[32m +                {[m
[32m +                    "id": 2,[m
[32m +                    "featured_media": "test_related_article_image",[m
[32m +                    "author": "test_related_article_author",[m
[32m +                    "categories": [4, 5],[m
[32m +                    "group": [4],[m
[32m +                    "tags": ["test_related_article"],[m
[32m +                },[m
[32m +                {[m
[32m +                    "id": 2,[m
[32m +                    "featured_media": "test_related_article_image",[m
[32m +                    "author": "test_related_article_author",[m
[32m +                    "categories": [4, 5],[m
[32m +                    "group": [4],[m
[32m +                    "tags": ["test_related_article2"],[m
[32m +                },[m
[32m +            ],[m
[32m +            2,[m
[32m +        )[m
[32m +        get_user.return_value = "test_author"[m
[32m +        get_tags_by_id.return_value = [[m
[32m +            {"id": 1, "name": "test_tag_1", "slug": "test_tag_1"},[m
[32m +            {"id": 2, "name": "test_tag_2", "slug": "test_tag_2"},[m
[32m +        ][m
[32m +        article = {[m
[32m +            "id": 1,[m
[32m +            "featured_media": "test",[m
[32m +            "author": "test",[m
[32m +            "categories": [1, 2],[m
[32m +            "group": [1],[m
[32m +            "tags": ["test"],[m
[32m +        }[m
[32m +[m
[32m +        context = get_article_context(article, ["test_related_article2"])[m
[32m +        expected_context = {[m
[32m +            "article": {[m
[32m +                "id": 1,[m
[32m +                "author": "test_author",[m
[32m +                "categories": [1, 2],[m
[32m +                "featured_media": "test",[m
[32m +                "group": "test_group",[m
[32m +                "image": None,[m
[32m +                "tags": ["test"],[m
[32m +            },[m
[32m +            "is_in_series": False,[m
[32m +            "related_articles": [[m
[32m +                {[m
[32m +                    "id": 2,[m
[32m +                    "featured_media": "test_related_article_image",[m
[32m +                    "author": None,[m
[32m +                    "categories": [4, 5],[m
[32m +                    "group": [4],[m
[32m +                    "image": None,[m
[32m +                    "tags": ["test_related_article2"],[m
[32m +                }[m
[32m +            ],[m
[32m +            "tags": [[m
[32m +                {"id": 1, "name": "test_tag_1", "slug": "test_tag_1"},[m
[32m +                {"id": 2, "name": "test_tag_2", "slug": "test_tag_2"},[m
[32m +            ],[m
[32m +        }[m
[32m +[m
[32m +        self.maxDiff = None[m
[32m +        self.assertEqual(context, expected_context)[m
[32m++=======[m
[32m+ [m
[32m+         # page information is correct[m
[32m+         self.assertEqual(group_context["current_page"], 1)[m
[32m+         self.assertEqual(group_context["total_pages"], 2)[m
[32m+         self.assertEqual(group_context["group"], "test")[m
[32m+ [m
[32m+         # all articles were transformed[m
[32m+         for article in group_context["articles"]:[m
[32m+             self.assertIsNotNone(article["author"]["name"])[m
[32m+             self.assertIsNotNone(article["image"])[m
[32m+             self.assertIsNotNone(article["group"])[m
[32m+ [m
[32m+         for article in group_context["featured_articles"]:[m
[32m+             self.assertIsNotNone(article["author"]["name"])[m
[32m+             self.assertIsNotNone(article["image"])[m
[32m+             self.assertIsNotNone(article["group"])[m
[32m+ [m
[32m+         # all categories that the articles had were resolved[m
[32m+         used_categories = list(group_context["used_categories"].keys())[m
[32m+         for category in all_categories:[m
[32m+             self.assertTrue(category in used_categories)[m
[32m+ [m
[32m+     @vcr.use_cassette("fixtures/vcr_cassettes/get_topic_context.yaml")[m
[32m+     def test_get_topic_page_context(self):[m
[32m+         articles, total_pages = api.get_articles()[m
[32m+         all_categories = [[m
[32m+             category[m
[32m+             for article in articles[m
[32m+             for category in article["categories"][m
[32m+         ][m
[32m+ [m
[32m+         all_groups = [[m
[32m+             group for article in articles for group in article["group"][m
[32m+         ][m
[32m+ [m
[32m+         featured, _ = api.get_articles(sticky=True)[m
[32m+ [m
[32m+         # TODO: TDD refactor of function signature, to include[m
[32m+         # get the context by topic id[m
[32m+         topic_context = get_topic_page_context(1, articles, "2")[m
[32m+ [m
[32m+         # page information is correct[m
[32m+         self.assertEqual(topic_context["current_page"], 1)[m
[32m+         self.assertEqual(topic_context["total_pages"], 2)[m
[32m+ [m
[32m+         # all articles were transformed[m
[32m+         for article in topic_context["articles"]:[m
[32m+             self.assertIsNotNone(article["author"]["name"])[m
[32m+             self.assertIsNotNone(article["image"])[m
[32m+             self.assertIsNotNone(article["topic"])[m
[32m+ [m
[32m+         # all categories that the articles had were resolved[m
[32m+         used_categories = list(topic_context["used_categories"].keys())[m
[32m+         for category in all_categories:[m
[32m+             self.assertTrue(category in used_categories)[m
[32m+ [m
[32m+         # all topics that the articles had were resolved[m
[32m+         used_topics = list(topic_context["groups"].keys())[m
[32m+         for topic in all_groups:[m
[32m+             self.assertTrue(topic in used_topics)[m
[32m+ [m
[32m+     @vcr.use_cassette("fixtures/vcr_cassettes/get_article_context.yaml")[m
[32m+     def test_get_article_context(self):[m
[32m+         article = api.get_article([m
[32m+             "canonical-announces-support-for"[m
[32m+             "-ubuntu-on-windows-subsystem-for-linux-2"[m
[32m+         )[m
[32m+ [m
[32m+         article_context = get_article_context(article)[m
[32m+ [m
[32m+         self.assertIsNotNone(article_context["article"]["author"]["name"])[m
[32m+         self.assertTrue([m
[32m+             "cloudinary" in article_context["article"]["content"]["rendered"][m
[32m+         )[m
[32m+         self.assertIsNotNone(article_context["article"]["topic"])[m
[32m+ [m
[32m+         self.assertEqual(len(article_context["related_articles"]), 3)[m
[32m+ [m
[32m+         for tag in article_context["tags"]:[m
[32m+             self.assertTrue(tag["id"] in article["tags"])[m
[32m+ [m
[32m+         self.assertFalse(article_context["is_in_series"])[m
[32m++>>>>>>> 236002a... Updates common view logic tests[m
